/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    /** OpenAPI description (this document) */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/achievements": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.achievements.id"];
          user_id?: components["parameters"]["rowFilter.achievements.user_id"];
          achievement_type?: components["parameters"]["rowFilter.achievements.achievement_type"];
          achievement_name?: components["parameters"]["rowFilter.achievements.achievement_name"];
          description?: components["parameters"]["rowFilter.achievements.description"];
          badge_icon?: components["parameters"]["rowFilter.achievements.badge_icon"];
          earned_at?: components["parameters"]["rowFilter.achievements.earned_at"];
          metadata?: components["parameters"]["rowFilter.achievements.metadata"];
          created_at?: components["parameters"]["rowFilter.achievements.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["achievements"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.achievements.id"];
          user_id?: components["parameters"]["rowFilter.achievements.user_id"];
          achievement_type?: components["parameters"]["rowFilter.achievements.achievement_type"];
          achievement_name?: components["parameters"]["rowFilter.achievements.achievement_name"];
          description?: components["parameters"]["rowFilter.achievements.description"];
          badge_icon?: components["parameters"]["rowFilter.achievements.badge_icon"];
          earned_at?: components["parameters"]["rowFilter.achievements.earned_at"];
          metadata?: components["parameters"]["rowFilter.achievements.metadata"];
          created_at?: components["parameters"]["rowFilter.achievements.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.achievements.id"];
          user_id?: components["parameters"]["rowFilter.achievements.user_id"];
          achievement_type?: components["parameters"]["rowFilter.achievements.achievement_type"];
          achievement_name?: components["parameters"]["rowFilter.achievements.achievement_name"];
          description?: components["parameters"]["rowFilter.achievements.description"];
          badge_icon?: components["parameters"]["rowFilter.achievements.badge_icon"];
          earned_at?: components["parameters"]["rowFilter.achievements.earned_at"];
          metadata?: components["parameters"]["rowFilter.achievements.metadata"];
          created_at?: components["parameters"]["rowFilter.achievements.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["achievements"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/equipment": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.equipment.id"];
          name?: components["parameters"]["rowFilter.equipment.name"];
          category?: components["parameters"]["rowFilter.equipment.category"];
          created_at?: components["parameters"]["rowFilter.equipment.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["equipment"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.equipment.id"];
          name?: components["parameters"]["rowFilter.equipment.name"];
          category?: components["parameters"]["rowFilter.equipment.category"];
          created_at?: components["parameters"]["rowFilter.equipment.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.equipment.id"];
          name?: components["parameters"]["rowFilter.equipment.name"];
          category?: components["parameters"]["rowFilter.equipment.category"];
          created_at?: components["parameters"]["rowFilter.equipment.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["equipment"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/favorite_gyms": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.favorite_gyms.id"];
          user_id?: components["parameters"]["rowFilter.favorite_gyms.user_id"];
          gym_id?: components["parameters"]["rowFilter.favorite_gyms.gym_id"];
          created_at?: components["parameters"]["rowFilter.favorite_gyms.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["favorite_gyms"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.favorite_gyms.id"];
          user_id?: components["parameters"]["rowFilter.favorite_gyms.user_id"];
          gym_id?: components["parameters"]["rowFilter.favorite_gyms.gym_id"];
          created_at?: components["parameters"]["rowFilter.favorite_gyms.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.favorite_gyms.id"];
          user_id?: components["parameters"]["rowFilter.favorite_gyms.user_id"];
          gym_id?: components["parameters"]["rowFilter.favorite_gyms.gym_id"];
          created_at?: components["parameters"]["rowFilter.favorite_gyms.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["favorite_gyms"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/follows": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.follows.id"];
          follower_id?: components["parameters"]["rowFilter.follows.follower_id"];
          following_id?: components["parameters"]["rowFilter.follows.following_id"];
          created_at?: components["parameters"]["rowFilter.follows.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["follows"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.follows.id"];
          follower_id?: components["parameters"]["rowFilter.follows.follower_id"];
          following_id?: components["parameters"]["rowFilter.follows.following_id"];
          created_at?: components["parameters"]["rowFilter.follows.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.follows.id"];
          follower_id?: components["parameters"]["rowFilter.follows.follower_id"];
          following_id?: components["parameters"]["rowFilter.follows.following_id"];
          created_at?: components["parameters"]["rowFilter.follows.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["follows"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/geography_columns": {
    get: {
      parameters: {
        query?: {
          f_table_catalog?: components["parameters"]["rowFilter.geography_columns.f_table_catalog"];
          f_table_schema?: components["parameters"]["rowFilter.geography_columns.f_table_schema"];
          f_table_name?: components["parameters"]["rowFilter.geography_columns.f_table_name"];
          f_geography_column?: components["parameters"]["rowFilter.geography_columns.f_geography_column"];
          coord_dimension?: components["parameters"]["rowFilter.geography_columns.coord_dimension"];
          srid?: components["parameters"]["rowFilter.geography_columns.srid"];
          type?: components["parameters"]["rowFilter.geography_columns.type"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
  };
  "/geometry_columns": {
    get: {
      parameters: {
        query?: {
          f_table_catalog?: components["parameters"]["rowFilter.geometry_columns.f_table_catalog"];
          f_table_schema?: components["parameters"]["rowFilter.geometry_columns.f_table_schema"];
          f_table_name?: components["parameters"]["rowFilter.geometry_columns.f_table_name"];
          f_geometry_column?: components["parameters"]["rowFilter.geometry_columns.f_geometry_column"];
          coord_dimension?: components["parameters"]["rowFilter.geometry_columns.coord_dimension"];
          srid?: components["parameters"]["rowFilter.geometry_columns.srid"];
          type?: components["parameters"]["rowFilter.geometry_columns.type"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["geometry_columns"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          f_table_catalog?: components["parameters"]["rowFilter.geometry_columns.f_table_catalog"];
          f_table_schema?: components["parameters"]["rowFilter.geometry_columns.f_table_schema"];
          f_table_name?: components["parameters"]["rowFilter.geometry_columns.f_table_name"];
          f_geometry_column?: components["parameters"]["rowFilter.geometry_columns.f_geometry_column"];
          coord_dimension?: components["parameters"]["rowFilter.geometry_columns.coord_dimension"];
          srid?: components["parameters"]["rowFilter.geometry_columns.srid"];
          type?: components["parameters"]["rowFilter.geometry_columns.type"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          f_table_catalog?: components["parameters"]["rowFilter.geometry_columns.f_table_catalog"];
          f_table_schema?: components["parameters"]["rowFilter.geometry_columns.f_table_schema"];
          f_table_name?: components["parameters"]["rowFilter.geometry_columns.f_table_name"];
          f_geometry_column?: components["parameters"]["rowFilter.geometry_columns.f_geometry_column"];
          coord_dimension?: components["parameters"]["rowFilter.geometry_columns.coord_dimension"];
          srid?: components["parameters"]["rowFilter.geometry_columns.srid"];
          type?: components["parameters"]["rowFilter.geometry_columns.type"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["geometry_columns"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/gym_checkins": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_checkins.id"];
          user_id?: components["parameters"]["rowFilter.gym_checkins.user_id"];
          gym_id?: components["parameters"]["rowFilter.gym_checkins.gym_id"];
          checked_in_at?: components["parameters"]["rowFilter.gym_checkins.checked_in_at"];
          checked_out_at?: components["parameters"]["rowFilter.gym_checkins.checked_out_at"];
          crowd_level?: components["parameters"]["rowFilter.gym_checkins.crowd_level"];
          created_at?: components["parameters"]["rowFilter.gym_checkins.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["gym_checkins"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_checkins.id"];
          user_id?: components["parameters"]["rowFilter.gym_checkins.user_id"];
          gym_id?: components["parameters"]["rowFilter.gym_checkins.gym_id"];
          checked_in_at?: components["parameters"]["rowFilter.gym_checkins.checked_in_at"];
          checked_out_at?: components["parameters"]["rowFilter.gym_checkins.checked_out_at"];
          crowd_level?: components["parameters"]["rowFilter.gym_checkins.crowd_level"];
          created_at?: components["parameters"]["rowFilter.gym_checkins.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_checkins.id"];
          user_id?: components["parameters"]["rowFilter.gym_checkins.user_id"];
          gym_id?: components["parameters"]["rowFilter.gym_checkins.gym_id"];
          checked_in_at?: components["parameters"]["rowFilter.gym_checkins.checked_in_at"];
          checked_out_at?: components["parameters"]["rowFilter.gym_checkins.checked_out_at"];
          crowd_level?: components["parameters"]["rowFilter.gym_checkins.crowd_level"];
          created_at?: components["parameters"]["rowFilter.gym_checkins.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["gym_checkins"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/gym_equipment": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_equipment.id"];
          gym_id?: components["parameters"]["rowFilter.gym_equipment.gym_id"];
          category?: components["parameters"]["rowFilter.gym_equipment.category"];
          type?: components["parameters"]["rowFilter.gym_equipment.type"];
          brand?: components["parameters"]["rowFilter.gym_equipment.brand"];
          model?: components["parameters"]["rowFilter.gym_equipment.model"];
          quantity?: components["parameters"]["rowFilter.gym_equipment.quantity"];
          muscle_groups?: components["parameters"]["rowFilter.gym_equipment.muscle_groups"];
          notes?: components["parameters"]["rowFilter.gym_equipment.notes"];
          image_url?: components["parameters"]["rowFilter.gym_equipment.image_url"];
          created_at?: components["parameters"]["rowFilter.gym_equipment.created_at"];
          updated_at?: components["parameters"]["rowFilter.gym_equipment.updated_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["gym_equipment"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_equipment.id"];
          gym_id?: components["parameters"]["rowFilter.gym_equipment.gym_id"];
          category?: components["parameters"]["rowFilter.gym_equipment.category"];
          type?: components["parameters"]["rowFilter.gym_equipment.type"];
          brand?: components["parameters"]["rowFilter.gym_equipment.brand"];
          model?: components["parameters"]["rowFilter.gym_equipment.model"];
          quantity?: components["parameters"]["rowFilter.gym_equipment.quantity"];
          muscle_groups?: components["parameters"]["rowFilter.gym_equipment.muscle_groups"];
          notes?: components["parameters"]["rowFilter.gym_equipment.notes"];
          image_url?: components["parameters"]["rowFilter.gym_equipment.image_url"];
          created_at?: components["parameters"]["rowFilter.gym_equipment.created_at"];
          updated_at?: components["parameters"]["rowFilter.gym_equipment.updated_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_equipment.id"];
          gym_id?: components["parameters"]["rowFilter.gym_equipment.gym_id"];
          category?: components["parameters"]["rowFilter.gym_equipment.category"];
          type?: components["parameters"]["rowFilter.gym_equipment.type"];
          brand?: components["parameters"]["rowFilter.gym_equipment.brand"];
          model?: components["parameters"]["rowFilter.gym_equipment.model"];
          quantity?: components["parameters"]["rowFilter.gym_equipment.quantity"];
          muscle_groups?: components["parameters"]["rowFilter.gym_equipment.muscle_groups"];
          notes?: components["parameters"]["rowFilter.gym_equipment.notes"];
          image_url?: components["parameters"]["rowFilter.gym_equipment.image_url"];
          created_at?: components["parameters"]["rowFilter.gym_equipment.created_at"];
          updated_at?: components["parameters"]["rowFilter.gym_equipment.updated_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["gym_equipment"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/gym_friends": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_friends.id"];
          user_id?: components["parameters"]["rowFilter.gym_friends.user_id"];
          friend_id?: components["parameters"]["rowFilter.gym_friends.friend_id"];
          status?: components["parameters"]["rowFilter.gym_friends.status"];
          created_at?: components["parameters"]["rowFilter.gym_friends.created_at"];
          accepted_at?: components["parameters"]["rowFilter.gym_friends.accepted_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["gym_friends"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_friends.id"];
          user_id?: components["parameters"]["rowFilter.gym_friends.user_id"];
          friend_id?: components["parameters"]["rowFilter.gym_friends.friend_id"];
          status?: components["parameters"]["rowFilter.gym_friends.status"];
          created_at?: components["parameters"]["rowFilter.gym_friends.created_at"];
          accepted_at?: components["parameters"]["rowFilter.gym_friends.accepted_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_friends.id"];
          user_id?: components["parameters"]["rowFilter.gym_friends.user_id"];
          friend_id?: components["parameters"]["rowFilter.gym_friends.friend_id"];
          status?: components["parameters"]["rowFilter.gym_friends.status"];
          created_at?: components["parameters"]["rowFilter.gym_friends.created_at"];
          accepted_at?: components["parameters"]["rowFilter.gym_friends.accepted_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["gym_friends"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/gym_machines": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_machines.id"];
          gym_id?: components["parameters"]["rowFilter.gym_machines.gym_id"];
          machine_id?: components["parameters"]["rowFilter.gym_machines.machine_id"];
          quantity?: components["parameters"]["rowFilter.gym_machines.quantity"];
          notes?: components["parameters"]["rowFilter.gym_machines.notes"];
          created_at?: components["parameters"]["rowFilter.gym_machines.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["gym_machines"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_machines.id"];
          gym_id?: components["parameters"]["rowFilter.gym_machines.gym_id"];
          machine_id?: components["parameters"]["rowFilter.gym_machines.machine_id"];
          quantity?: components["parameters"]["rowFilter.gym_machines.quantity"];
          notes?: components["parameters"]["rowFilter.gym_machines.notes"];
          created_at?: components["parameters"]["rowFilter.gym_machines.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_machines.id"];
          gym_id?: components["parameters"]["rowFilter.gym_machines.gym_id"];
          machine_id?: components["parameters"]["rowFilter.gym_machines.machine_id"];
          quantity?: components["parameters"]["rowFilter.gym_machines.quantity"];
          notes?: components["parameters"]["rowFilter.gym_machines.notes"];
          created_at?: components["parameters"]["rowFilter.gym_machines.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["gym_machines"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/gym_posts": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_posts.id"];
          user_id?: components["parameters"]["rowFilter.gym_posts.user_id"];
          gym_id?: components["parameters"]["rowFilter.gym_posts.gym_id"];
          content?: components["parameters"]["rowFilter.gym_posts.content"];
          images?: components["parameters"]["rowFilter.gym_posts.images"];
          workout_type?: components["parameters"]["rowFilter.gym_posts.workout_type"];
          muscle_groups_trained?: components["parameters"]["rowFilter.gym_posts.muscle_groups_trained"];
          duration_minutes?: components["parameters"]["rowFilter.gym_posts.duration_minutes"];
          crowd_status?: components["parameters"]["rowFilter.gym_posts.crowd_status"];
          like_count?: components["parameters"]["rowFilter.gym_posts.like_count"];
          comment_count?: components["parameters"]["rowFilter.gym_posts.comment_count"];
          visibility?: components["parameters"]["rowFilter.gym_posts.visibility"];
          created_at?: components["parameters"]["rowFilter.gym_posts.created_at"];
          updated_at?: components["parameters"]["rowFilter.gym_posts.updated_at"];
          is_public?: components["parameters"]["rowFilter.gym_posts.is_public"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["gym_posts"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_posts.id"];
          user_id?: components["parameters"]["rowFilter.gym_posts.user_id"];
          gym_id?: components["parameters"]["rowFilter.gym_posts.gym_id"];
          content?: components["parameters"]["rowFilter.gym_posts.content"];
          images?: components["parameters"]["rowFilter.gym_posts.images"];
          workout_type?: components["parameters"]["rowFilter.gym_posts.workout_type"];
          muscle_groups_trained?: components["parameters"]["rowFilter.gym_posts.muscle_groups_trained"];
          duration_minutes?: components["parameters"]["rowFilter.gym_posts.duration_minutes"];
          crowd_status?: components["parameters"]["rowFilter.gym_posts.crowd_status"];
          like_count?: components["parameters"]["rowFilter.gym_posts.like_count"];
          comment_count?: components["parameters"]["rowFilter.gym_posts.comment_count"];
          visibility?: components["parameters"]["rowFilter.gym_posts.visibility"];
          created_at?: components["parameters"]["rowFilter.gym_posts.created_at"];
          updated_at?: components["parameters"]["rowFilter.gym_posts.updated_at"];
          is_public?: components["parameters"]["rowFilter.gym_posts.is_public"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_posts.id"];
          user_id?: components["parameters"]["rowFilter.gym_posts.user_id"];
          gym_id?: components["parameters"]["rowFilter.gym_posts.gym_id"];
          content?: components["parameters"]["rowFilter.gym_posts.content"];
          images?: components["parameters"]["rowFilter.gym_posts.images"];
          workout_type?: components["parameters"]["rowFilter.gym_posts.workout_type"];
          muscle_groups_trained?: components["parameters"]["rowFilter.gym_posts.muscle_groups_trained"];
          duration_minutes?: components["parameters"]["rowFilter.gym_posts.duration_minutes"];
          crowd_status?: components["parameters"]["rowFilter.gym_posts.crowd_status"];
          like_count?: components["parameters"]["rowFilter.gym_posts.like_count"];
          comment_count?: components["parameters"]["rowFilter.gym_posts.comment_count"];
          visibility?: components["parameters"]["rowFilter.gym_posts.visibility"];
          created_at?: components["parameters"]["rowFilter.gym_posts.created_at"];
          updated_at?: components["parameters"]["rowFilter.gym_posts.updated_at"];
          is_public?: components["parameters"]["rowFilter.gym_posts.is_public"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["gym_posts"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/gym_reviews": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_reviews.id"];
          gym_id?: components["parameters"]["rowFilter.gym_reviews.gym_id"];
          user_id?: components["parameters"]["rowFilter.gym_reviews.user_id"];
          rating?: components["parameters"]["rowFilter.gym_reviews.rating"];
          title?: components["parameters"]["rowFilter.gym_reviews.title"];
          content?: components["parameters"]["rowFilter.gym_reviews.content"];
          equipment_rating?: components["parameters"]["rowFilter.gym_reviews.equipment_rating"];
          cleanliness_rating?: components["parameters"]["rowFilter.gym_reviews.cleanliness_rating"];
          staff_rating?: components["parameters"]["rowFilter.gym_reviews.staff_rating"];
          crowd_rating?: components["parameters"]["rowFilter.gym_reviews.crowd_rating"];
          images?: components["parameters"]["rowFilter.gym_reviews.images"];
          helpful_count?: components["parameters"]["rowFilter.gym_reviews.helpful_count"];
          created_at?: components["parameters"]["rowFilter.gym_reviews.created_at"];
          updated_at?: components["parameters"]["rowFilter.gym_reviews.updated_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["gym_reviews"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_reviews.id"];
          gym_id?: components["parameters"]["rowFilter.gym_reviews.gym_id"];
          user_id?: components["parameters"]["rowFilter.gym_reviews.user_id"];
          rating?: components["parameters"]["rowFilter.gym_reviews.rating"];
          title?: components["parameters"]["rowFilter.gym_reviews.title"];
          content?: components["parameters"]["rowFilter.gym_reviews.content"];
          equipment_rating?: components["parameters"]["rowFilter.gym_reviews.equipment_rating"];
          cleanliness_rating?: components["parameters"]["rowFilter.gym_reviews.cleanliness_rating"];
          staff_rating?: components["parameters"]["rowFilter.gym_reviews.staff_rating"];
          crowd_rating?: components["parameters"]["rowFilter.gym_reviews.crowd_rating"];
          images?: components["parameters"]["rowFilter.gym_reviews.images"];
          helpful_count?: components["parameters"]["rowFilter.gym_reviews.helpful_count"];
          created_at?: components["parameters"]["rowFilter.gym_reviews.created_at"];
          updated_at?: components["parameters"]["rowFilter.gym_reviews.updated_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gym_reviews.id"];
          gym_id?: components["parameters"]["rowFilter.gym_reviews.gym_id"];
          user_id?: components["parameters"]["rowFilter.gym_reviews.user_id"];
          rating?: components["parameters"]["rowFilter.gym_reviews.rating"];
          title?: components["parameters"]["rowFilter.gym_reviews.title"];
          content?: components["parameters"]["rowFilter.gym_reviews.content"];
          equipment_rating?: components["parameters"]["rowFilter.gym_reviews.equipment_rating"];
          cleanliness_rating?: components["parameters"]["rowFilter.gym_reviews.cleanliness_rating"];
          staff_rating?: components["parameters"]["rowFilter.gym_reviews.staff_rating"];
          crowd_rating?: components["parameters"]["rowFilter.gym_reviews.crowd_rating"];
          images?: components["parameters"]["rowFilter.gym_reviews.images"];
          helpful_count?: components["parameters"]["rowFilter.gym_reviews.helpful_count"];
          created_at?: components["parameters"]["rowFilter.gym_reviews.created_at"];
          updated_at?: components["parameters"]["rowFilter.gym_reviews.updated_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["gym_reviews"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/gyms": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gyms.id"];
          name?: components["parameters"]["rowFilter.gyms.name"];
          name_kana?: components["parameters"]["rowFilter.gyms.name_kana"];
          description?: components["parameters"]["rowFilter.gyms.description"];
          latitude?: components["parameters"]["rowFilter.gyms.latitude"];
          longitude?: components["parameters"]["rowFilter.gyms.longitude"];
          location?: components["parameters"]["rowFilter.gyms.location"];
          address?: components["parameters"]["rowFilter.gyms.address"];
          prefecture?: components["parameters"]["rowFilter.gyms.prefecture"];
          city?: components["parameters"]["rowFilter.gyms.city"];
          business_hours?: components["parameters"]["rowFilter.gyms.business_hours"];
          holidays?: components["parameters"]["rowFilter.gyms.holidays"];
          phone?: components["parameters"]["rowFilter.gyms.phone"];
          website?: components["parameters"]["rowFilter.gyms.website"];
          facilities?: components["parameters"]["rowFilter.gyms.facilities"];
          equipment_types?: components["parameters"]["rowFilter.gyms.equipment_types"];
          machine_brands?: components["parameters"]["rowFilter.gyms.machine_brands"];
          price_info?: components["parameters"]["rowFilter.gyms.price_info"];
          rating?: components["parameters"]["rowFilter.gyms.rating"];
          review_count?: components["parameters"]["rowFilter.gyms.review_count"];
          status?: components["parameters"]["rowFilter.gyms.status"];
          verified?: components["parameters"]["rowFilter.gyms.verified"];
          created_at?: components["parameters"]["rowFilter.gyms.created_at"];
          updated_at?: components["parameters"]["rowFilter.gyms.updated_at"];
          created_by?: components["parameters"]["rowFilter.gyms.created_by"];
          has_24h?: components["parameters"]["rowFilter.gyms.has_24h"];
          has_parking?: components["parameters"]["rowFilter.gyms.has_parking"];
          has_shower?: components["parameters"]["rowFilter.gyms.has_shower"];
          has_locker?: components["parameters"]["rowFilter.gyms.has_locker"];
          has_sauna?: components["parameters"]["rowFilter.gyms.has_sauna"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["gyms"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gyms.id"];
          name?: components["parameters"]["rowFilter.gyms.name"];
          name_kana?: components["parameters"]["rowFilter.gyms.name_kana"];
          description?: components["parameters"]["rowFilter.gyms.description"];
          latitude?: components["parameters"]["rowFilter.gyms.latitude"];
          longitude?: components["parameters"]["rowFilter.gyms.longitude"];
          location?: components["parameters"]["rowFilter.gyms.location"];
          address?: components["parameters"]["rowFilter.gyms.address"];
          prefecture?: components["parameters"]["rowFilter.gyms.prefecture"];
          city?: components["parameters"]["rowFilter.gyms.city"];
          business_hours?: components["parameters"]["rowFilter.gyms.business_hours"];
          holidays?: components["parameters"]["rowFilter.gyms.holidays"];
          phone?: components["parameters"]["rowFilter.gyms.phone"];
          website?: components["parameters"]["rowFilter.gyms.website"];
          facilities?: components["parameters"]["rowFilter.gyms.facilities"];
          equipment_types?: components["parameters"]["rowFilter.gyms.equipment_types"];
          machine_brands?: components["parameters"]["rowFilter.gyms.machine_brands"];
          price_info?: components["parameters"]["rowFilter.gyms.price_info"];
          rating?: components["parameters"]["rowFilter.gyms.rating"];
          review_count?: components["parameters"]["rowFilter.gyms.review_count"];
          status?: components["parameters"]["rowFilter.gyms.status"];
          verified?: components["parameters"]["rowFilter.gyms.verified"];
          created_at?: components["parameters"]["rowFilter.gyms.created_at"];
          updated_at?: components["parameters"]["rowFilter.gyms.updated_at"];
          created_by?: components["parameters"]["rowFilter.gyms.created_by"];
          has_24h?: components["parameters"]["rowFilter.gyms.has_24h"];
          has_parking?: components["parameters"]["rowFilter.gyms.has_parking"];
          has_shower?: components["parameters"]["rowFilter.gyms.has_shower"];
          has_locker?: components["parameters"]["rowFilter.gyms.has_locker"];
          has_sauna?: components["parameters"]["rowFilter.gyms.has_sauna"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.gyms.id"];
          name?: components["parameters"]["rowFilter.gyms.name"];
          name_kana?: components["parameters"]["rowFilter.gyms.name_kana"];
          description?: components["parameters"]["rowFilter.gyms.description"];
          latitude?: components["parameters"]["rowFilter.gyms.latitude"];
          longitude?: components["parameters"]["rowFilter.gyms.longitude"];
          location?: components["parameters"]["rowFilter.gyms.location"];
          address?: components["parameters"]["rowFilter.gyms.address"];
          prefecture?: components["parameters"]["rowFilter.gyms.prefecture"];
          city?: components["parameters"]["rowFilter.gyms.city"];
          business_hours?: components["parameters"]["rowFilter.gyms.business_hours"];
          holidays?: components["parameters"]["rowFilter.gyms.holidays"];
          phone?: components["parameters"]["rowFilter.gyms.phone"];
          website?: components["parameters"]["rowFilter.gyms.website"];
          facilities?: components["parameters"]["rowFilter.gyms.facilities"];
          equipment_types?: components["parameters"]["rowFilter.gyms.equipment_types"];
          machine_brands?: components["parameters"]["rowFilter.gyms.machine_brands"];
          price_info?: components["parameters"]["rowFilter.gyms.price_info"];
          rating?: components["parameters"]["rowFilter.gyms.rating"];
          review_count?: components["parameters"]["rowFilter.gyms.review_count"];
          status?: components["parameters"]["rowFilter.gyms.status"];
          verified?: components["parameters"]["rowFilter.gyms.verified"];
          created_at?: components["parameters"]["rowFilter.gyms.created_at"];
          updated_at?: components["parameters"]["rowFilter.gyms.updated_at"];
          created_by?: components["parameters"]["rowFilter.gyms.created_by"];
          has_24h?: components["parameters"]["rowFilter.gyms.has_24h"];
          has_parking?: components["parameters"]["rowFilter.gyms.has_parking"];
          has_shower?: components["parameters"]["rowFilter.gyms.has_shower"];
          has_locker?: components["parameters"]["rowFilter.gyms.has_locker"];
          has_sauna?: components["parameters"]["rowFilter.gyms.has_sauna"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["gyms"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/machine_makers": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.machine_makers.id"];
          name?: components["parameters"]["rowFilter.machine_makers.name"];
          created_at?: components["parameters"]["rowFilter.machine_makers.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["machine_makers"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.machine_makers.id"];
          name?: components["parameters"]["rowFilter.machine_makers.name"];
          created_at?: components["parameters"]["rowFilter.machine_makers.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.machine_makers.id"];
          name?: components["parameters"]["rowFilter.machine_makers.name"];
          created_at?: components["parameters"]["rowFilter.machine_makers.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["machine_makers"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/machines": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.machines.id"];
          name?: components["parameters"]["rowFilter.machines.name"];
          target?: components["parameters"]["rowFilter.machines.target"];
          target_category?: components["parameters"]["rowFilter.machines.target_category"];
          target_detail?: components["parameters"]["rowFilter.machines.target_detail"];
          type?: components["parameters"]["rowFilter.machines.type"];
          maker?: components["parameters"]["rowFilter.machines.maker"];
          created_at?: components["parameters"]["rowFilter.machines.created_at"];
          updated_at?: components["parameters"]["rowFilter.machines.updated_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["machines"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.machines.id"];
          name?: components["parameters"]["rowFilter.machines.name"];
          target?: components["parameters"]["rowFilter.machines.target"];
          target_category?: components["parameters"]["rowFilter.machines.target_category"];
          target_detail?: components["parameters"]["rowFilter.machines.target_detail"];
          type?: components["parameters"]["rowFilter.machines.type"];
          maker?: components["parameters"]["rowFilter.machines.maker"];
          created_at?: components["parameters"]["rowFilter.machines.created_at"];
          updated_at?: components["parameters"]["rowFilter.machines.updated_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.machines.id"];
          name?: components["parameters"]["rowFilter.machines.name"];
          target?: components["parameters"]["rowFilter.machines.target"];
          target_category?: components["parameters"]["rowFilter.machines.target_category"];
          target_detail?: components["parameters"]["rowFilter.machines.target_detail"];
          type?: components["parameters"]["rowFilter.machines.type"];
          maker?: components["parameters"]["rowFilter.machines.maker"];
          created_at?: components["parameters"]["rowFilter.machines.created_at"];
          updated_at?: components["parameters"]["rowFilter.machines.updated_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["machines"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/maker": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.maker.id"];
          name?: components["parameters"]["rowFilter.maker.name"];
          created_at?: components["parameters"]["rowFilter.maker.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["maker"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.maker.id"];
          name?: components["parameters"]["rowFilter.maker.name"];
          created_at?: components["parameters"]["rowFilter.maker.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.maker.id"];
          name?: components["parameters"]["rowFilter.maker.name"];
          created_at?: components["parameters"]["rowFilter.maker.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["maker"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/muscle_groups": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.muscle_groups.id"];
          category?: components["parameters"]["rowFilter.muscle_groups.category"];
          name?: components["parameters"]["rowFilter.muscle_groups.name"];
          parts?: components["parameters"]["rowFilter.muscle_groups.parts"];
          created_at?: components["parameters"]["rowFilter.muscle_groups.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["muscle_groups"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.muscle_groups.id"];
          category?: components["parameters"]["rowFilter.muscle_groups.category"];
          name?: components["parameters"]["rowFilter.muscle_groups.name"];
          parts?: components["parameters"]["rowFilter.muscle_groups.parts"];
          created_at?: components["parameters"]["rowFilter.muscle_groups.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.muscle_groups.id"];
          category?: components["parameters"]["rowFilter.muscle_groups.category"];
          name?: components["parameters"]["rowFilter.muscle_groups.name"];
          parts?: components["parameters"]["rowFilter.muscle_groups.parts"];
          created_at?: components["parameters"]["rowFilter.muscle_groups.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["muscle_groups"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/notifications": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.notifications.id"];
          user_id?: components["parameters"]["rowFilter.notifications.user_id"];
          type?: components["parameters"]["rowFilter.notifications.type"];
          title?: components["parameters"]["rowFilter.notifications.title"];
          message?: components["parameters"]["rowFilter.notifications.message"];
          related_user_id?: components["parameters"]["rowFilter.notifications.related_user_id"];
          related_post_id?: components["parameters"]["rowFilter.notifications.related_post_id"];
          related_gym_id?: components["parameters"]["rowFilter.notifications.related_gym_id"];
          is_read?: components["parameters"]["rowFilter.notifications.is_read"];
          created_at?: components["parameters"]["rowFilter.notifications.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["notifications"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.notifications.id"];
          user_id?: components["parameters"]["rowFilter.notifications.user_id"];
          type?: components["parameters"]["rowFilter.notifications.type"];
          title?: components["parameters"]["rowFilter.notifications.title"];
          message?: components["parameters"]["rowFilter.notifications.message"];
          related_user_id?: components["parameters"]["rowFilter.notifications.related_user_id"];
          related_post_id?: components["parameters"]["rowFilter.notifications.related_post_id"];
          related_gym_id?: components["parameters"]["rowFilter.notifications.related_gym_id"];
          is_read?: components["parameters"]["rowFilter.notifications.is_read"];
          created_at?: components["parameters"]["rowFilter.notifications.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.notifications.id"];
          user_id?: components["parameters"]["rowFilter.notifications.user_id"];
          type?: components["parameters"]["rowFilter.notifications.type"];
          title?: components["parameters"]["rowFilter.notifications.title"];
          message?: components["parameters"]["rowFilter.notifications.message"];
          related_user_id?: components["parameters"]["rowFilter.notifications.related_user_id"];
          related_post_id?: components["parameters"]["rowFilter.notifications.related_post_id"];
          related_gym_id?: components["parameters"]["rowFilter.notifications.related_gym_id"];
          is_read?: components["parameters"]["rowFilter.notifications.is_read"];
          created_at?: components["parameters"]["rowFilter.notifications.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["notifications"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/personal_records": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.personal_records.id"];
          user_id?: components["parameters"]["rowFilter.personal_records.user_id"];
          exercise_name?: components["parameters"]["rowFilter.personal_records.exercise_name"];
          record_type?: components["parameters"]["rowFilter.personal_records.record_type"];
          record_value?: components["parameters"]["rowFilter.personal_records.record_value"];
          record_unit?: components["parameters"]["rowFilter.personal_records.record_unit"];
          previous_value?: components["parameters"]["rowFilter.personal_records.previous_value"];
          achieved_at?: components["parameters"]["rowFilter.personal_records.achieved_at"];
          gym_id?: components["parameters"]["rowFilter.personal_records.gym_id"];
          workout_session_id?: components["parameters"]["rowFilter.personal_records.workout_session_id"];
          notes?: components["parameters"]["rowFilter.personal_records.notes"];
          created_at?: components["parameters"]["rowFilter.personal_records.created_at"];
          updated_at?: components["parameters"]["rowFilter.personal_records.updated_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["personal_records"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.personal_records.id"];
          user_id?: components["parameters"]["rowFilter.personal_records.user_id"];
          exercise_name?: components["parameters"]["rowFilter.personal_records.exercise_name"];
          record_type?: components["parameters"]["rowFilter.personal_records.record_type"];
          record_value?: components["parameters"]["rowFilter.personal_records.record_value"];
          record_unit?: components["parameters"]["rowFilter.personal_records.record_unit"];
          previous_value?: components["parameters"]["rowFilter.personal_records.previous_value"];
          achieved_at?: components["parameters"]["rowFilter.personal_records.achieved_at"];
          gym_id?: components["parameters"]["rowFilter.personal_records.gym_id"];
          workout_session_id?: components["parameters"]["rowFilter.personal_records.workout_session_id"];
          notes?: components["parameters"]["rowFilter.personal_records.notes"];
          created_at?: components["parameters"]["rowFilter.personal_records.created_at"];
          updated_at?: components["parameters"]["rowFilter.personal_records.updated_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.personal_records.id"];
          user_id?: components["parameters"]["rowFilter.personal_records.user_id"];
          exercise_name?: components["parameters"]["rowFilter.personal_records.exercise_name"];
          record_type?: components["parameters"]["rowFilter.personal_records.record_type"];
          record_value?: components["parameters"]["rowFilter.personal_records.record_value"];
          record_unit?: components["parameters"]["rowFilter.personal_records.record_unit"];
          previous_value?: components["parameters"]["rowFilter.personal_records.previous_value"];
          achieved_at?: components["parameters"]["rowFilter.personal_records.achieved_at"];
          gym_id?: components["parameters"]["rowFilter.personal_records.gym_id"];
          workout_session_id?: components["parameters"]["rowFilter.personal_records.workout_session_id"];
          notes?: components["parameters"]["rowFilter.personal_records.notes"];
          created_at?: components["parameters"]["rowFilter.personal_records.created_at"];
          updated_at?: components["parameters"]["rowFilter.personal_records.updated_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["personal_records"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/post_comments": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.post_comments.id"];
          user_id?: components["parameters"]["rowFilter.post_comments.user_id"];
          post_id?: components["parameters"]["rowFilter.post_comments.post_id"];
          content?: components["parameters"]["rowFilter.post_comments.content"];
          created_at?: components["parameters"]["rowFilter.post_comments.created_at"];
          updated_at?: components["parameters"]["rowFilter.post_comments.updated_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["post_comments"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.post_comments.id"];
          user_id?: components["parameters"]["rowFilter.post_comments.user_id"];
          post_id?: components["parameters"]["rowFilter.post_comments.post_id"];
          content?: components["parameters"]["rowFilter.post_comments.content"];
          created_at?: components["parameters"]["rowFilter.post_comments.created_at"];
          updated_at?: components["parameters"]["rowFilter.post_comments.updated_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.post_comments.id"];
          user_id?: components["parameters"]["rowFilter.post_comments.user_id"];
          post_id?: components["parameters"]["rowFilter.post_comments.post_id"];
          content?: components["parameters"]["rowFilter.post_comments.content"];
          created_at?: components["parameters"]["rowFilter.post_comments.created_at"];
          updated_at?: components["parameters"]["rowFilter.post_comments.updated_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["post_comments"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/post_likes": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.post_likes.id"];
          user_id?: components["parameters"]["rowFilter.post_likes.user_id"];
          post_id?: components["parameters"]["rowFilter.post_likes.post_id"];
          created_at?: components["parameters"]["rowFilter.post_likes.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["post_likes"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.post_likes.id"];
          user_id?: components["parameters"]["rowFilter.post_likes.user_id"];
          post_id?: components["parameters"]["rowFilter.post_likes.post_id"];
          created_at?: components["parameters"]["rowFilter.post_likes.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.post_likes.id"];
          user_id?: components["parameters"]["rowFilter.post_likes.user_id"];
          post_id?: components["parameters"]["rowFilter.post_likes.post_id"];
          created_at?: components["parameters"]["rowFilter.post_likes.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["post_likes"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/rpc/_postgis_deprecate": {
    get: {
      parameters: {
        query: {
          oldname: [object Object];
          newname: [object Object];
          version: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_postgis_index_extent": {
    get: {
      parameters: {
        query: {
          tbl: [object Object];
          col: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_postgis_pgsql_version": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args2"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_postgis_scripts_pgsql_version": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args2"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_postgis_selectivity": {
    get: {
      parameters: {
        query: {
          tbl: [object Object];
          att_name: [object Object];
          geom: [object Object];
          mode?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_postgis_stats": {
    get: {
      parameters: {
        query: {
          tbl: [object Object];
          att_name: [object Object];
          ""?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_3ddfullywithin": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args6"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_3ddwithin": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args6"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_3dintersects": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_contains": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_containsproperly": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_coveredby": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_covers": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_crosses": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_dfullywithin": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args6"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_dwithin": {
    get: {
      parameters: {
        query: {
          geog1: [object Object];
          geog2: [object Object];
          tolerance: [object Object];
          use_spheroid?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args5"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_equals": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_intersects": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_linecrossingdirection": {
    get: {
      parameters: {
        query: {
          line1: [object Object];
          line2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args7"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_longestline": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_maxdistance": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_orderingequals": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_overlaps": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_sortablehash": {
    get: {
      parameters: {
        query: {
          geom: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_touches": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_voronoi": {
    get: {
      parameters: {
        query: {
          g1: [object Object];
          clip?: [object Object];
          tolerance?: [object Object];
          return_polygons?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/_st_within": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/addauth": {
    /** args: auth_token - Adds an authorization token to be used in the current transaction. */
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: auth_token - Adds an authorization token to be used in the current transaction. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/addgeometrycolumn": {
    /** args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table. */
    get: {
      parameters: {
        query: {
          catalog_name: [object Object];
          schema_name: [object Object];
          table_name: [object Object];
          column_name: [object Object];
          new_srid_in: [object Object];
          new_type: [object Object];
          new_dim: [object Object];
          use_typmod?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/disablelongtransactions": {
    /** Disables long transaction support. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Disables long transaction support. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/dropgeometrycolumn": {
    /** args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table. */
    get: {
      parameters: {
        query: {
          catalog_name: [object Object];
          schema_name: [object Object];
          table_name: [object Object];
          column_name: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/dropgeometrytable": {
    /** args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns. */
    get: {
      parameters: {
        query: {
          catalog_name: [object Object];
          schema_name: [object Object];
          table_name: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/enablelongtransactions": {
    /** Enables long transaction support. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Enables long transaction support. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/equals": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geography": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_above": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_below": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_cmp": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_contained_3d": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_contains": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_contains_3d": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_distance_box": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_distance_centroid": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_eq": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_ge": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_gist_same_2d": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_gt": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_le": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_left": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_lt": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_overabove": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_overbelow": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_overlaps": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_overlaps_3d": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_overleft": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_overright": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_right": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_same": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_same_3d": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geometry_within": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geomfromewkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/geomfromewkt": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/gettransactionid": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args2"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/longtransactionsenabled": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args2"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/populate_geometry_columns": {
    /** args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints. */
    get: {
      parameters: {
        query: {
          tbl_oid: [object Object];
          use_typmod?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_constraint_dims": {
    get: {
      parameters: {
        query: {
          geomschema: [object Object];
          geomtable: [object Object];
          geomcolumn: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args8"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_constraint_srid": {
    get: {
      parameters: {
        query: {
          geomschema: [object Object];
          geomtable: [object Object];
          geomcolumn: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args8"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_constraint_type": {
    get: {
      parameters: {
        query: {
          geomschema: [object Object];
          geomtable: [object Object];
          geomcolumn: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args8"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_extensions_upgrade": {
    /** Packages and upgrades PostGIS extensions (e.g. postgis_raster,postgis_topology, postgis_sfcgal) to latest available version. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Packages and upgrades PostGIS extensions (e.g. postgis_raster,postgis_topology, postgis_sfcgal) to latest available version. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_full_version": {
    /** Reports full PostGIS version and build configuration infos. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Reports full PostGIS version and build configuration infos. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_geos_version": {
    /** Returns the version number of the GEOS library. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Returns the version number of the GEOS library. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_lib_build_date": {
    /** Returns build date of the PostGIS library. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Returns build date of the PostGIS library. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_lib_revision": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args2"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_lib_version": {
    /** Returns the version number of the PostGIS library. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Returns the version number of the PostGIS library. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_libjson_version": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args2"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_liblwgeom_version": {
    /** Returns the version number of the liblwgeom library. This should match the version of PostGIS. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Returns the version number of the liblwgeom library. This should match the version of PostGIS. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_libprotobuf_version": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args2"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_libxml_version": {
    /** Returns the version number of the libxml2 library. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Returns the version number of the libxml2 library. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_proj_version": {
    /** Returns the version number of the PROJ4 library. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Returns the version number of the PROJ4 library. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_scripts_build_date": {
    /** Returns build date of the PostGIS scripts. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Returns build date of the PostGIS scripts. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_scripts_installed": {
    /** Returns version of the PostGIS scripts installed in this database. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Returns version of the PostGIS scripts installed in this database. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_scripts_released": {
    /** Returns the version number of the postgis.sql script released with the installed PostGIS lib. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Returns the version number of the postgis.sql script released with the installed PostGIS lib. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_svn_version": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args2"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_transform_geometry": {
    get: {
      parameters: {
        query: {
          geom: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_type_name": {
    get: {
      parameters: {
        query: {
          geomname: [object Object];
          coord_dimension: [object Object];
          use_new_name?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_version": {
    /** Returns PostGIS version number and compile-time options. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Returns PostGIS version number and compile-time options. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/postgis_wagyu_version": {
    /** Returns the version number of the internal Wagyu library. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** Returns the version number of the internal Wagyu library. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_3dclosestpoint": {
    /** args: g1, g2 - Returns the 3D point on g1 that is closest to g2. This is the first point of the 3D shortest line. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, g2 - Returns the 3D point on g1 that is closest to g2. This is the first point of the 3D shortest line. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_3ddfullywithin": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args6"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_3ddistance": {
    /** args: g1, g2 - Returns the 3D cartesian minimum distance (based on spatial ref) between two geometries in projected units. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, g2 - Returns the 3D cartesian minimum distance (based on spatial ref) between two geometries in projected units. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_3ddwithin": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args6"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_3dintersects": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_3dlongestline": {
    /** args: g1, g2 - Returns the 3D longest line between two geometries */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, g2 - Returns the 3D longest line between two geometries */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_3dmakebox": {
    /** args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by two 3D point geometries. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by two 3D point geometries. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_3dmaxdistance": {
    /** args: g1, g2 - Returns the 3D cartesian maximum distance (based on spatial ref) between two geometries in projected units. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, g2 - Returns the 3D cartesian maximum distance (based on spatial ref) between two geometries in projected units. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_3dshortestline": {
    /** args: g1, g2 - Returns the 3D shortest line between two geometries */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, g2 - Returns the 3D shortest line between two geometries */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_addpoint": {
    /** args: linestring, point, position = -1 - Add a point to a LineString. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: linestring, point, position = -1 - Add a point to a LineString. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_angle": {
    /** args: point1, point2, point3, point4 - Returns the angle between two vectors defined by 3 or 4 points, or 2 lines. */
    get: {
      parameters: {
        query: {
          pt1: [object Object];
          pt2: [object Object];
          pt3: [object Object];
          pt4?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: point1, point2, point3, point4 - Returns the angle between two vectors defined by 3 or 4 points, or 2 lines. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_area": {
    /** args: geog, use_spheroid=true - Returns the area of a polygonal geometry. */
    get: {
      parameters: {
        query: {
          geog: [object Object];
          use_spheroid?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geog, use_spheroid=true - Returns the area of a polygonal geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_asencodedpolyline": {
    get: {
      parameters: {
        query: {
          geom: [object Object];
          nprecision?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_asewkt": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_asgeojson": {
    get: {
      parameters: {
        query: {
          r: [object Object];
          geom_column?: [object Object];
          maxdecimaldigits?: [object Object];
          pretty_bool?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_asgml": {
    get: {
      parameters: {
        query: {
          version: [object Object];
          geom: [object Object];
          maxdecimaldigits?: [object Object];
          options?: [object Object];
          nprefix?: [object Object];
          id?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_askml": {
    get: {
      parameters: {
        query: {
          geom: [object Object];
          maxdecimaldigits?: [object Object];
          nprefix?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_aslatlontext": {
    get: {
      parameters: {
        query: {
          geom: [object Object];
          tmpl?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_asmarc21": {
    get: {
      parameters: {
        query: {
          geom: [object Object];
          format?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_asmvtgeom": {
    get: {
      parameters: {
        query: {
          geom: [object Object];
          bounds: [object Object];
          extent?: [object Object];
          buffer?: [object Object];
          clip_geom?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_assvg": {
    get: {
      parameters: {
        query: {
          geom: [object Object];
          rel?: [object Object];
          maxdecimaldigits?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_astext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_astwkb": {
    get: {
      parameters: {
        query: {
          geom: [object Object];
          ids: [object Object];
          prec?: [object Object];
          prec_z?: [object Object];
          prec_m?: [object Object];
          with_sizes?: [object Object];
          with_boxes?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_asx3d": {
    get: {
      parameters: {
        query: {
          geom: [object Object];
          maxdecimaldigits?: [object Object];
          options?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_azimuth": {
    /** args: origin, target - Returns the north-based azimuth of a line between two points. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: origin, target - Returns the north-based azimuth of a line between two points. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_boundingdiagonal": {
    /** args: geom, fits=false - Returns the diagonal of a geometrys bounding box. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          fits?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, fits=false - Returns the diagonal of a geometrys bounding box. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_buffer": {
    /** args: g1, radius_of_buffer, num_seg_quarter_circle - Computes a geometry covering all points within a given distance from a geometry. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          radius: [object Object];
          quadsegs: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, radius_of_buffer, num_seg_quarter_circle - Computes a geometry covering all points within a given distance from a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_centroid": {
    /** args: g1, use_spheroid=true - Returns the geometric center of a geometry. */
    get: {
      parameters: {
        query: {
          "": [object Object];
          use_spheroid?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, use_spheroid=true - Returns the geometric center of a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_clipbybox2d": {
    /** args: geom, box - Computes the portion of a geometry falling within a rectangle. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          box: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, box - Computes the portion of a geometry falling within a rectangle. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_closestpoint": {
    /** args: geom1, geom2 - Returns the 2D point on g1 that is closest to g2. This is the first point of the shortest line from one geometry to the other. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom1, geom2 - Returns the 2D point on g1 that is closest to g2. This is the first point of the shortest line from one geometry to the other. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_collect": {
    /** args: g1, g2 - Creates a GeometryCollection or Multi* geometry from a set of geometries. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, g2 - Creates a GeometryCollection or Multi* geometry from a set of geometries. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_concavehull": {
    /** args: param_geom, param_pctconvex, param_allow_holes = false - Computes a possibly concave geometry that encloses all input geometry vertices */
    get: {
      parameters: {
        query: {
          param_geom: [object Object];
          param_pctconvex: [object Object];
          param_allow_holes?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: param_geom, param_pctconvex, param_allow_holes = false - Computes a possibly concave geometry that encloses all input geometry vertices */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_contains": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_containsproperly": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_coorddim": {
    /** args: geomA - Return the coordinate dimension of a geometry. */
    get: {
      parameters: {
        query: {
          geometry: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomA - Return the coordinate dimension of a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_coveredby": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_covers": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_crosses": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_curvetoline": {
    /** args: curveGeom, tolerance, tolerance_type, flags - Converts a geometry containing curves to a linear geometry. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          tol?: [object Object];
          toltype?: [object Object];
          flags?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: curveGeom, tolerance, tolerance_type, flags - Converts a geometry containing curves to a linear geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_delaunaytriangles": {
    /** args: g1, tolerance, flags - Returns the Delaunay triangulation of the vertices of a geometry. */
    get: {
      parameters: {
        query: {
          g1: [object Object];
          tolerance?: [object Object];
          flags?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, tolerance, flags - Returns the Delaunay triangulation of the vertices of a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_dfullywithin": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args6"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_difference": {
    /** args: geomA, geomB, gridSize = -1 - Computes a geometry representing the part of geometry A that does not intersect geometry B. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          gridsize?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomA, geomB, gridSize = -1 - Computes a geometry representing the part of geometry A that does not intersect geometry B. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_disjoint": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_distance": {
    /** args: geog1, geog2, use_spheroid=true - Returns the distance between two geometry or geography values. */
    get: {
      parameters: {
        query: {
          geog1: [object Object];
          geog2: [object Object];
          use_spheroid?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geog1, geog2, use_spheroid=true - Returns the distance between two geometry or geography values. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_distancesphere": {
    /** args: geomlonlatA, geomlonlatB, radius=6371008 - Returns minimum distance in meters between two lon/lat geometries using a spherical earth model. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          radius: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomlonlatA, geomlonlatB, radius=6371008 - Returns minimum distance in meters between two lon/lat geometries using a spherical earth model. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_distancespheroid": {
    /** args: geomlonlatA, geomlonlatB, measurement_spheroid=WGS84 - Returns the minimum distance between two lon/lat geometries using a spheroidal earth model. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomlonlatA, geomlonlatB, measurement_spheroid=WGS84 - Returns the minimum distance between two lon/lat geometries using a spheroidal earth model. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_dwithin": {
    get: {
      parameters: {
        query: {
          geog1: [object Object];
          geog2: [object Object];
          tolerance: [object Object];
          use_spheroid?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args5"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_equals": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_expand": {
    /** args: geom, dx, dy, dz=0, dm=0 - Returns a bounding box expanded from another bounding box or a geometry. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          dx: [object Object];
          dy: [object Object];
          dz?: [object Object];
          dm?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, dx, dy, dz=0, dm=0 - Returns a bounding box expanded from another bounding box or a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_force3d": {
    /** args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode. This is an alias for ST_Force3DZ. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          zvalue?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode. This is an alias for ST_Force3DZ. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_force3dm": {
    /** args: geomA, Mvalue = 0.0 - Force the geometries into XYM mode. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          mvalue?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomA, Mvalue = 0.0 - Force the geometries into XYM mode. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_force3dz": {
    /** args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          zvalue?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_force4d": {
    /** args: geomA, Zvalue = 0.0, Mvalue = 0.0 - Force the geometries into XYZM mode. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          zvalue?: [object Object];
          mvalue?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomA, Zvalue = 0.0, Mvalue = 0.0 - Force the geometries into XYZM mode. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_forcesfs": {
    /** args: geomA, version - Force the geometries to use SFS 1.1 geometry types only. */
    get: {
      parameters: {
        query: {
          "": [object Object];
          version: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomA, version - Force the geometries to use SFS 1.1 geometry types only. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_frechetdistance": {
    /** args: g1, g2, densifyFrac = -1 - Returns the Fréchet distance between two geometries. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          ""?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, g2, densifyFrac = -1 - Returns the Fréchet distance between two geometries. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_generatepoints": {
    /** args: g, npoints, seed - Generates random points contained in a Polygon or MultiPolygon. */
    get: {
      parameters: {
        query: {
          area: [object Object];
          npoints: [object Object];
          seed: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g, npoints, seed - Generates random points contained in a Polygon or MultiPolygon. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geogfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geogfromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geographyfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geohash": {
    get: {
      parameters: {
        query: {
          geom: [object Object];
          maxchars?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geomcollfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geomcollfromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geometricmedian": {
    /** args: geom, tolerance = NULL, max_iter = 10000, fail_if_not_converged = false - Returns the geometric median of a MultiPoint. */
    get: {
      parameters: {
        query: {
          g: [object Object];
          tolerance?: [object Object];
          max_iter?: [object Object];
          fail_if_not_converged?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, tolerance = NULL, max_iter = 10000, fail_if_not_converged = false - Returns the geometric median of a MultiPoint. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geometryfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geomfromewkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geomfromewkt": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geomfromgeojson": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geomfromgml": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geomfromkml": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geomfrommarc21": {
    get: {
      parameters: {
        query: {
          marc21xml: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geomfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geomfromtwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_geomfromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_gmltosql": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_hasarc": {
    /** args: geomA - Tests if a geometry contains a circular arc */
    get: {
      parameters: {
        query: {
          geometry: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomA - Tests if a geometry contains a circular arc */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_hausdorffdistance": {
    /** args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_hexagon": {
    /** args: size, cell_i, cell_j, origin - Returns a single hexagon, using the provided edge size and cell coordinate within the hexagon grid space. */
    get: {
      parameters: {
        query: {
          size: [object Object];
          cell_i: [object Object];
          cell_j: [object Object];
          origin?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: size, cell_i, cell_j, origin - Returns a single hexagon, using the provided edge size and cell coordinate within the hexagon grid space. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_hexagongrid": {
    /** args: size, bounds - Returns a set of hexagons and cell indices that completely cover the bounds of the geometry argument. */
    get: {
      parameters: {
        query: {
          size: [object Object];
          bounds: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: size, bounds - Returns a set of hexagons and cell indices that completely cover the bounds of the geometry argument. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_interpolatepoint": {
    /** args: linear_geom_with_measure, point - Returns the interpolated measure of a geometry closest to a point. */
    get: {
      parameters: {
        query: {
          line: [object Object];
          point: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: linear_geom_with_measure, point - Returns the interpolated measure of a geometry closest to a point. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_intersection": {
    /** args: geomA, geomB, gridSize = -1 - Computes a geometry representing the shared portion of geometries A and B. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          gridsize?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomA, geomB, gridSize = -1 - Computes a geometry representing the shared portion of geometries A and B. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_intersects": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_isvaliddetail": {
    /** args: geom, flags - Returns a valid_detail row stating if a geometry is valid or if not a reason and a location. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          flags?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, flags - Returns a valid_detail row stating if a geometry is valid or if not a reason and a location. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_length": {
    /** args: geog, use_spheroid=true - Returns the 2D length of a linear geometry. */
    get: {
      parameters: {
        query: {
          geog: [object Object];
          use_spheroid?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geog, use_spheroid=true - Returns the 2D length of a linear geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_letters": {
    /** args:  letters,  font - Returns the input letters rendered as geometry with a default start position at the origin and default text height of 100. */
    get: {
      parameters: {
        query: {
          letters: [object Object];
          font?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args:  letters,  font - Returns the input letters rendered as geometry with a default start position at the origin and default text height of 100. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_linecrossingdirection": {
    get: {
      parameters: {
        query: {
          line1: [object Object];
          line2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args7"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_linefromencodedpolyline": {
    get: {
      parameters: {
        query: {
          txtin: [object Object];
          nprecision?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_linefromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_linefromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_lineinterpolatepoints": {
    /** args: a_linestring, a_fraction, repeat - Returns points interpolated along a line at a fractional interval. */
    get: {
      parameters: {
        query: {
          "": [object Object];
          repeat?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: a_linestring, a_fraction, repeat - Returns points interpolated along a line at a fractional interval. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_linelocatepoint": {
    /** args: a_linestring, a_point - Returns the fractional location of the closest point on a line to a point. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: a_linestring, a_point - Returns the fractional location of the closest point on a line to a point. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_linestringfromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_linetocurve": {
    /** args: geomANoncircular - Converts a linear geometry to a curved geometry. */
    get: {
      parameters: {
        query: {
          geometry: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomANoncircular - Converts a linear geometry to a curved geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_locatealong": {
    /** args: geom_with_measure, measure, offset = 0 - Returns the point(s) on a geometry that match a measure value. */
    get: {
      parameters: {
        query: {
          geometry: [object Object];
          measure: [object Object];
          leftrightoffset?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom_with_measure, measure, offset = 0 - Returns the point(s) on a geometry that match a measure value. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_locatebetween": {
    /** args: geom, measure_start, measure_end, offset = 0 - Returns the portions of a geometry that match a measure range. */
    get: {
      parameters: {
        query: {
          geometry: [object Object];
          frommeasure: [object Object];
          tomeasure: [object Object];
          leftrightoffset?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, measure_start, measure_end, offset = 0 - Returns the portions of a geometry that match a measure range. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_locatebetweenelevations": {
    /** args: geom, elevation_start, elevation_end - Returns the portions of a geometry that lie in an elevation (Z) range. */
    get: {
      parameters: {
        query: {
          geometry: [object Object];
          fromelevation: [object Object];
          toelevation: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, elevation_start, elevation_end - Returns the portions of a geometry that lie in an elevation (Z) range. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_longestline": {
    /** args: g1, g2 - Returns the 2D longest line between two geometries. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, g2 - Returns the 2D longest line between two geometries. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_makebox2d": {
    /** args: pointLowLeft, pointUpRight - Creates a BOX2D defined by two 2D point geometries. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: pointLowLeft, pointUpRight - Creates a BOX2D defined by two 2D point geometries. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_makeline": {
    /** args: geom1, geom2 - Creates a LineString from Point, MultiPoint, or LineString geometries. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom1, geom2 - Creates a LineString from Point, MultiPoint, or LineString geometries. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_makevalid": {
    /** args: input, params - Attempts to make an invalid geometry valid without losing vertices. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          params: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: input, params - Attempts to make an invalid geometry valid without losing vertices. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_maxdistance": {
    /** args: g1, g2 - Returns the 2D largest distance between two geometries in projected units. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, g2 - Returns the 2D largest distance between two geometries in projected units. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_maximuminscribedcircle": {
    /** args: geom - Computes the largest circle contained within a geometry. */
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom - Computes the largest circle contained within a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_minimumboundingcircle": {
    /** args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that contains a geometry. */
    get: {
      parameters: {
        query: {
          inputgeom: [object Object];
          segs_per_quarter?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that contains a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_minimumboundingradius": {
    /** args: geom - Returns the center point and radius of the smallest circle that contains a geometry. */
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom - Returns the center point and radius of the smallest circle that contains a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_mlinefromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_mlinefromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_mpointfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_mpointfromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_mpolyfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_mpolyfromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_multilinefromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_multilinestringfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_multipointfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_multipointfromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_multipolyfromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_multipolygonfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_node": {
    /** args: geom - Nodes a collection of lines. */
    get: {
      parameters: {
        query: {
          g: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom - Nodes a collection of lines. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_normalize": {
    /** args: geom - Return the geometry in its canonical form. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom - Return the geometry in its canonical form. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_offsetcurve": {
    /** args: line, signed_distance, style_parameters=' - Returns an offset line at a given distance and side from an input line. */
    get: {
      parameters: {
        query: {
          line: [object Object];
          distance: [object Object];
          params?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: line, signed_distance, style_parameters=' - Returns an offset line at a given distance and side from an input line. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_orderingequals": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_overlaps": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_perimeter": {
    /** args: geog, use_spheroid=true - Returns the length of the boundary of a polygonal geometry or geography. */
    get: {
      parameters: {
        query: {
          geog: [object Object];
          use_spheroid?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geog, use_spheroid=true - Returns the length of the boundary of a polygonal geometry or geography. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_point": {
    /** args: x, y, srid=unknown - Creates a Point with X, Y and SRID values. */
    get: {
      parameters: {
        query: {
          "": [object Object];
          srid: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: x, y, srid=unknown - Creates a Point with X, Y and SRID values. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_pointfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_pointfromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_pointm": {
    /** args: x, y, m, srid=unknown - Creates a Point with X, Y, M and SRID values. */
    get: {
      parameters: {
        query: {
          xcoordinate: [object Object];
          ycoordinate: [object Object];
          mcoordinate: [object Object];
          srid?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: x, y, m, srid=unknown - Creates a Point with X, Y, M and SRID values. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_pointz": {
    /** args: x, y, z, srid=unknown - Creates a Point with X, Y, Z and SRID values. */
    get: {
      parameters: {
        query: {
          xcoordinate: [object Object];
          ycoordinate: [object Object];
          zcoordinate: [object Object];
          srid?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: x, y, z, srid=unknown - Creates a Point with X, Y, Z and SRID values. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_pointzm": {
    /** args: x, y, z, m, srid=unknown - Creates a Point with X, Y, Z, M and SRID values. */
    get: {
      parameters: {
        query: {
          xcoordinate: [object Object];
          ycoordinate: [object Object];
          zcoordinate: [object Object];
          mcoordinate: [object Object];
          srid?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: x, y, z, m, srid=unknown - Creates a Point with X, Y, Z, M and SRID values. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_polyfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_polyfromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_polygonfromtext": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_polygonfromwkb": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_project": {
    /** args: g1, distance, azimuth - Returns a point projected from a start point by a distance and bearing (azimuth). */
    get: {
      parameters: {
        query: {
          geog: [object Object];
          distance: [object Object];
          azimuth: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, distance, azimuth - Returns a point projected from a start point by a distance and bearing (azimuth). */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_quantizecoordinates": {
    /** args: g, prec_x, prec_y, prec_z, prec_m - Sets least significant bits of coordinates to zero */
    get: {
      parameters: {
        query: {
          g: [object Object];
          prec_x: [object Object];
          prec_y?: [object Object];
          prec_z?: [object Object];
          prec_m?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g, prec_x, prec_y, prec_z, prec_m - Sets least significant bits of coordinates to zero */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_reduceprecision": {
    /** args: g, gridsize - Returns a valid geometry with points rounded to a grid tolerance. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          gridsize: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g, gridsize - Returns a valid geometry with points rounded to a grid tolerance. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_relate": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_removerepeatedpoints": {
    /** args: geom, tolerance - Returns a version of a geometry with duplicate points removed. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          tolerance?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, tolerance - Returns a version of a geometry with duplicate points removed. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_scale": {
    /** args: geom, factor, origin - Scales a geometry by given factors. */
    get: {
      parameters: {
        query: {
          "": [object Object];
          origin: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, factor, origin - Scales a geometry by given factors. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_segmentize": {
    /** args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance. */
    get: {
      parameters: {
        query: {
          geog: [object Object];
          max_segment_length: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_setsrid": {
    /** args: geom, srid - Set the SRID on a geometry. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          srid: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, srid - Set the SRID on a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_sharedpaths": {
    /** args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_shortestline": {
    /** args: geom1, geom2 - Returns the 2D shortest line between two geometries */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom1, geom2 - Returns the 2D shortest line between two geometries */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_simplifypolygonhull": {
    /** args: param_geom, vertex_fraction, is_outer = true - Computes a simplifed topology-preserving outer or inner hull of a polygonal geometry. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          vertex_fraction: [object Object];
          is_outer?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: param_geom, vertex_fraction, is_outer = true - Computes a simplifed topology-preserving outer or inner hull of a polygonal geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_snap": {
    /** args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_snaptogrid": {
    /** args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_split": {
    /** args: input, blade - Returns a collection of geometries created by splitting a geometry by another geometry. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: input, blade - Returns a collection of geometries created by splitting a geometry by another geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_square": {
    /** args: size, cell_i, cell_j, origin - Returns a single square, using the provided edge size and cell coordinate within the square grid space. */
    get: {
      parameters: {
        query: {
          size: [object Object];
          cell_i: [object Object];
          cell_j: [object Object];
          origin?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: size, cell_i, cell_j, origin - Returns a single square, using the provided edge size and cell coordinate within the square grid space. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_squaregrid": {
    /** args: size, bounds - Returns a set of grid squares and cell indices that completely cover the bounds of the geometry argument. */
    get: {
      parameters: {
        query: {
          size: [object Object];
          bounds: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: size, bounds - Returns a set of grid squares and cell indices that completely cover the bounds of the geometry argument. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_srid": {
    /** args: g1 - Returns the spatial reference identifier for a geometry. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1 - Returns the spatial reference identifier for a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_subdivide": {
    /** args: geom, max_vertices=256, gridSize = -1 - Computes a rectilinear subdivision of a geometry. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          maxvertices?: [object Object];
          gridsize?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, max_vertices=256, gridSize = -1 - Computes a rectilinear subdivision of a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_swapordinates": {
    /** args: geom, ords - Returns a version of the given geometry with given ordinate values swapped. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          ords: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, ords - Returns a version of the given geometry with given ordinate values swapped. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_symdifference": {
    /** args: geomA, geomB, gridSize = -1 - Computes a geometry representing the portions of geometries A and B that do not intersect. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          gridsize?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geomA, geomB, gridSize = -1 - Computes a geometry representing the portions of geometries A and B that do not intersect. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_symmetricdifference": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_tileenvelope": {
    /** args: tileZoom, tileX, tileY, bounds=SRID=3857;LINESTRING(-20037508.342789 -20037508.342789,20037508.342789 20037508.342789), margin=0.0 - Creates a rectangular Polygon in Web Mercator (SRID:3857) using the XYZ tile system. */
    get: {
      parameters: {
        query: {
          zoom: [object Object];
          x: [object Object];
          y: [object Object];
          bounds?: [object Object];
          margin?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: tileZoom, tileX, tileY, bounds=SRID=3857;LINESTRING(-20037508.342789 -20037508.342789,20037508.342789 20037508.342789), margin=0.0 - Creates a rectangular Polygon in Web Mercator (SRID:3857) using the XYZ tile system. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_touches": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_transform": {
    /** args: geom, from_proj, to_srid - Return a new geometry with coordinates transformed to a different spatial reference system. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          from_proj: [object Object];
          to_srid: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, from_proj, to_srid - Return a new geometry with coordinates transformed to a different spatial reference system. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_triangulatepolygon": {
    /** args: geom - Computes the constrained Delaunay triangulation of polygons */
    get: {
      parameters: {
        query: {
          g1: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom - Computes the constrained Delaunay triangulation of polygons */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_unaryunion": {
    /** args: geom, gridSize = -1 - Computes the union of the components of a single geometry. */
    get: {
      parameters: {
        query: {
          "": [object Object];
          gridsize?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, gridSize = -1 - Computes the union of the components of a single geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_union": {
    /** args: g1, g2, gridSize - Computes a geometry representing the point-set union of the input geometries. */
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
          gridsize: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, g2, gridSize - Computes a geometry representing the point-set union of the input geometries. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_voronoilines": {
    /** args: g1, tolerance, extend_to - Returns the boundaries of the Voronoi diagram of the vertices of a geometry. */
    get: {
      parameters: {
        query: {
          g1: [object Object];
          tolerance?: [object Object];
          extend_to?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, tolerance, extend_to - Returns the boundaries of the Voronoi diagram of the vertices of a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_voronoipolygons": {
    /** args: g1, tolerance, extend_to - Returns the cells of the Voronoi diagram of the vertices of a geometry. */
    get: {
      parameters: {
        query: {
          g1: [object Object];
          tolerance?: [object Object];
          extend_to?: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: g1, tolerance, extend_to - Returns the cells of the Voronoi diagram of the vertices of a geometry. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_within": {
    get: {
      parameters: {
        query: {
          geom1: [object Object];
          geom2: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_wkbtosql": {
    get: {
      parameters: {
        query: {
          wkb: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_wkttosql": {
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/st_wrapx": {
    /** args: geom, wrap, move - Wrap a geometry around an X value. */
    get: {
      parameters: {
        query: {
          geom: [object Object];
          wrap: [object Object];
          move: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: geom, wrap, move - Wrap a geometry around an X value. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/unlockrows": {
    /** args: auth_token - Removes all locks held by an authorization token. */
    get: {
      parameters: {
        query: {
          "": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: auth_token - Removes all locks held by an authorization token. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/rpc/updategeometrysrid": {
    /** args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, and the table metadata. */
    get: {
      parameters: {
        query: {
          catalogn_name: [object Object];
          schema_name: [object Object];
          table_name: [object Object];
          column_name: [object Object];
          new_srid_in: [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
    /** args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, and the table metadata. */
    post: {
      parameters: {
        header?: {
          Prefer?: components["parameters"]["preferParams"];
        };
      };
      requestBody: {
        content: {
          "application/json": [object Object];
          "application/vnd.pgrst.object+json": [object Object];
          "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
          "text/csv": [object Object];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/spatial_ref_sys": {
    get: {
      parameters: {
        query?: {
          srid?: components["parameters"]["rowFilter.spatial_ref_sys.srid"];
          auth_name?: components["parameters"]["rowFilter.spatial_ref_sys.auth_name"];
          auth_srid?: components["parameters"]["rowFilter.spatial_ref_sys.auth_srid"];
          srtext?: components["parameters"]["rowFilter.spatial_ref_sys.srtext"];
          proj4text?: components["parameters"]["rowFilter.spatial_ref_sys.proj4text"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["spatial_ref_sys"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          srid?: components["parameters"]["rowFilter.spatial_ref_sys.srid"];
          auth_name?: components["parameters"]["rowFilter.spatial_ref_sys.auth_name"];
          auth_srid?: components["parameters"]["rowFilter.spatial_ref_sys.auth_srid"];
          srtext?: components["parameters"]["rowFilter.spatial_ref_sys.srtext"];
          proj4text?: components["parameters"]["rowFilter.spatial_ref_sys.proj4text"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          srid?: components["parameters"]["rowFilter.spatial_ref_sys.srid"];
          auth_name?: components["parameters"]["rowFilter.spatial_ref_sys.auth_name"];
          auth_srid?: components["parameters"]["rowFilter.spatial_ref_sys.auth_srid"];
          srtext?: components["parameters"]["rowFilter.spatial_ref_sys.srtext"];
          proj4text?: components["parameters"]["rowFilter.spatial_ref_sys.proj4text"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["spatial_ref_sys"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/user_profiles": {
    get: {
      parameters: {
        query?: {
          user_id?: components["parameters"]["rowFilter.user_profiles.user_id"];
          gym_experience_years?: components["parameters"]["rowFilter.user_profiles.gym_experience_years"];
          training_frequency?: components["parameters"]["rowFilter.user_profiles.training_frequency"];
          training_goals?: components["parameters"]["rowFilter.user_profiles.training_goals"];
          preferred_training_time?: components["parameters"]["rowFilter.user_profiles.preferred_training_time"];
          height_cm?: components["parameters"]["rowFilter.user_profiles.height_cm"];
          weight_kg?: components["parameters"]["rowFilter.user_profiles.weight_kg"];
          body_fat_percentage?: components["parameters"]["rowFilter.user_profiles.body_fat_percentage"];
          profile_visibility?: components["parameters"]["rowFilter.user_profiles.profile_visibility"];
          show_stats?: components["parameters"]["rowFilter.user_profiles.show_stats"];
          created_at?: components["parameters"]["rowFilter.user_profiles.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_profiles.updated_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["user_profiles"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          user_id?: components["parameters"]["rowFilter.user_profiles.user_id"];
          gym_experience_years?: components["parameters"]["rowFilter.user_profiles.gym_experience_years"];
          training_frequency?: components["parameters"]["rowFilter.user_profiles.training_frequency"];
          training_goals?: components["parameters"]["rowFilter.user_profiles.training_goals"];
          preferred_training_time?: components["parameters"]["rowFilter.user_profiles.preferred_training_time"];
          height_cm?: components["parameters"]["rowFilter.user_profiles.height_cm"];
          weight_kg?: components["parameters"]["rowFilter.user_profiles.weight_kg"];
          body_fat_percentage?: components["parameters"]["rowFilter.user_profiles.body_fat_percentage"];
          profile_visibility?: components["parameters"]["rowFilter.user_profiles.profile_visibility"];
          show_stats?: components["parameters"]["rowFilter.user_profiles.show_stats"];
          created_at?: components["parameters"]["rowFilter.user_profiles.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_profiles.updated_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          user_id?: components["parameters"]["rowFilter.user_profiles.user_id"];
          gym_experience_years?: components["parameters"]["rowFilter.user_profiles.gym_experience_years"];
          training_frequency?: components["parameters"]["rowFilter.user_profiles.training_frequency"];
          training_goals?: components["parameters"]["rowFilter.user_profiles.training_goals"];
          preferred_training_time?: components["parameters"]["rowFilter.user_profiles.preferred_training_time"];
          height_cm?: components["parameters"]["rowFilter.user_profiles.height_cm"];
          weight_kg?: components["parameters"]["rowFilter.user_profiles.weight_kg"];
          body_fat_percentage?: components["parameters"]["rowFilter.user_profiles.body_fat_percentage"];
          profile_visibility?: components["parameters"]["rowFilter.user_profiles.profile_visibility"];
          show_stats?: components["parameters"]["rowFilter.user_profiles.show_stats"];
          created_at?: components["parameters"]["rowFilter.user_profiles.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_profiles.updated_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["user_profiles"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.users.id"];
          email?: components["parameters"]["rowFilter.users.email"];
          username?: components["parameters"]["rowFilter.users.username"];
          display_name?: components["parameters"]["rowFilter.users.display_name"];
          avatar_url?: components["parameters"]["rowFilter.users.avatar_url"];
          bio?: components["parameters"]["rowFilter.users.bio"];
          is_active?: components["parameters"]["rowFilter.users.is_active"];
          email_verified?: components["parameters"]["rowFilter.users.email_verified"];
          created_at?: components["parameters"]["rowFilter.users.created_at"];
          updated_at?: components["parameters"]["rowFilter.users.updated_at"];
          last_seen_at?: components["parameters"]["rowFilter.users.last_seen_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["users"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.users.id"];
          email?: components["parameters"]["rowFilter.users.email"];
          username?: components["parameters"]["rowFilter.users.username"];
          display_name?: components["parameters"]["rowFilter.users.display_name"];
          avatar_url?: components["parameters"]["rowFilter.users.avatar_url"];
          bio?: components["parameters"]["rowFilter.users.bio"];
          is_active?: components["parameters"]["rowFilter.users.is_active"];
          email_verified?: components["parameters"]["rowFilter.users.email_verified"];
          created_at?: components["parameters"]["rowFilter.users.created_at"];
          updated_at?: components["parameters"]["rowFilter.users.updated_at"];
          last_seen_at?: components["parameters"]["rowFilter.users.last_seen_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.users.id"];
          email?: components["parameters"]["rowFilter.users.email"];
          username?: components["parameters"]["rowFilter.users.username"];
          display_name?: components["parameters"]["rowFilter.users.display_name"];
          avatar_url?: components["parameters"]["rowFilter.users.avatar_url"];
          bio?: components["parameters"]["rowFilter.users.bio"];
          is_active?: components["parameters"]["rowFilter.users.is_active"];
          email_verified?: components["parameters"]["rowFilter.users.email_verified"];
          created_at?: components["parameters"]["rowFilter.users.created_at"];
          updated_at?: components["parameters"]["rowFilter.users.updated_at"];
          last_seen_at?: components["parameters"]["rowFilter.users.last_seen_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["users"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/workout_exercises": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.workout_exercises.id"];
          session_id?: components["parameters"]["rowFilter.workout_exercises.session_id"];
          exercise_name?: components["parameters"]["rowFilter.workout_exercises.exercise_name"];
          muscle_group?: components["parameters"]["rowFilter.workout_exercises.muscle_group"];
          equipment_type?: components["parameters"]["rowFilter.workout_exercises.equipment_type"];
          sets?: components["parameters"]["rowFilter.workout_exercises.sets"];
          notes?: components["parameters"]["rowFilter.workout_exercises.notes"];
          order_index?: components["parameters"]["rowFilter.workout_exercises.order_index"];
          created_at?: components["parameters"]["rowFilter.workout_exercises.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["workout_exercises"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.workout_exercises.id"];
          session_id?: components["parameters"]["rowFilter.workout_exercises.session_id"];
          exercise_name?: components["parameters"]["rowFilter.workout_exercises.exercise_name"];
          muscle_group?: components["parameters"]["rowFilter.workout_exercises.muscle_group"];
          equipment_type?: components["parameters"]["rowFilter.workout_exercises.equipment_type"];
          sets?: components["parameters"]["rowFilter.workout_exercises.sets"];
          notes?: components["parameters"]["rowFilter.workout_exercises.notes"];
          order_index?: components["parameters"]["rowFilter.workout_exercises.order_index"];
          created_at?: components["parameters"]["rowFilter.workout_exercises.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.workout_exercises.id"];
          session_id?: components["parameters"]["rowFilter.workout_exercises.session_id"];
          exercise_name?: components["parameters"]["rowFilter.workout_exercises.exercise_name"];
          muscle_group?: components["parameters"]["rowFilter.workout_exercises.muscle_group"];
          equipment_type?: components["parameters"]["rowFilter.workout_exercises.equipment_type"];
          sets?: components["parameters"]["rowFilter.workout_exercises.sets"];
          notes?: components["parameters"]["rowFilter.workout_exercises.notes"];
          order_index?: components["parameters"]["rowFilter.workout_exercises.order_index"];
          created_at?: components["parameters"]["rowFilter.workout_exercises.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["workout_exercises"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
  "/workout_sessions": {
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.workout_sessions.id"];
          user_id?: components["parameters"]["rowFilter.workout_sessions.user_id"];
          gym_id?: components["parameters"]["rowFilter.workout_sessions.gym_id"];
          started_at?: components["parameters"]["rowFilter.workout_sessions.started_at"];
          ended_at?: components["parameters"]["rowFilter.workout_sessions.ended_at"];
          notes?: components["parameters"]["rowFilter.workout_sessions.notes"];
          mood?: components["parameters"]["rowFilter.workout_sessions.mood"];
          created_at?: components["parameters"]["rowFilter.workout_sessions.created_at"];
          select?: components["parameters"]["select"];
          order?: components["parameters"]["order"];
          offset?: components["parameters"]["offset"];
          limit?: components["parameters"]["limit"];
        };
        header?: {
          Range?: components["parameters"]["range"];
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          Prefer?: components["parameters"]["preferCount"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": [object Object];
            "application/vnd.pgrst.object+json": [object Object];
            "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
            "text/csv": [object Object];
          };
        };
        /** @description Partial Content */
        206: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          select?: components["parameters"]["select"];
        };
        header?: {
          Prefer?: components["parameters"]["preferPost"];
        };
      };
      requestBody: components["requestBodies"]["workout_sessions"];
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.workout_sessions.id"];
          user_id?: components["parameters"]["rowFilter.workout_sessions.user_id"];
          gym_id?: components["parameters"]["rowFilter.workout_sessions.gym_id"];
          started_at?: components["parameters"]["rowFilter.workout_sessions.started_at"];
          ended_at?: components["parameters"]["rowFilter.workout_sessions.ended_at"];
          notes?: components["parameters"]["rowFilter.workout_sessions.notes"];
          mood?: components["parameters"]["rowFilter.workout_sessions.mood"];
          created_at?: components["parameters"]["rowFilter.workout_sessions.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.workout_sessions.id"];
          user_id?: components["parameters"]["rowFilter.workout_sessions.user_id"];
          gym_id?: components["parameters"]["rowFilter.workout_sessions.gym_id"];
          started_at?: components["parameters"]["rowFilter.workout_sessions.started_at"];
          ended_at?: components["parameters"]["rowFilter.workout_sessions.ended_at"];
          notes?: components["parameters"]["rowFilter.workout_sessions.notes"];
          mood?: components["parameters"]["rowFilter.workout_sessions.mood"];
          created_at?: components["parameters"]["rowFilter.workout_sessions.created_at"];
        };
        header?: {
          Prefer?: components["parameters"]["preferReturn"];
        };
      };
      requestBody: components["requestBodies"]["workout_sessions"];
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    achievements: [object Object];
    equipment: [object Object];
    favorite_gyms: [object Object];
    follows: [object Object];
    geography_columns: [object Object];
    geometry_columns: [object Object];
    gym_checkins: [object Object];
    gym_equipment: [object Object];
    gym_friends: [object Object];
    gym_machines: [object Object];
    gym_posts: [object Object];
    gym_reviews: [object Object];
    gyms: [object Object];
    machine_makers: [object Object];
    machines: [object Object];
    maker: [object Object];
    muscle_groups: [object Object];
    notifications: [object Object];
    personal_records: [object Object];
    post_comments: [object Object];
    post_likes: [object Object];
    spatial_ref_sys: [object Object];
    user_profiles: [object Object];
    users: [object Object];
    workout_exercises: [object Object];
    workout_sessions: [object Object];
  };
  responses: never;
  parameters: {
    /** @description Limiting and Pagination */
    limit?: [object Object];
    /** @description Limiting and Pagination */
    offset?: [object Object];
    /** @description On Conflict */
    on_conflict?: [object Object];
    /** @description Ordering */
    order?: [object Object];
    /** @description Preference */
    preferCount?: [object Object];
    /** @description Preference */
    preferParams?: [object Object];
    /** @description Preference */
    preferPost?: [object Object];
    /** @description Preference */
    preferReturn?: [object Object];
    /** @description Limiting and Pagination */
    range?: [object Object];
    /** @description Limiting and Pagination */
    rangeUnit?: [object Object];
    "rowFilter.achievements.achievement_name"?: [object Object];
    "rowFilter.achievements.achievement_type"?: [object Object];
    "rowFilter.achievements.badge_icon"?: [object Object];
    "rowFilter.achievements.created_at"?: [object Object];
    "rowFilter.achievements.description"?: [object Object];
    "rowFilter.achievements.earned_at"?: [object Object];
    "rowFilter.achievements.id"?: [object Object];
    "rowFilter.achievements.metadata"?: [object Object];
    "rowFilter.achievements.user_id"?: [object Object];
    "rowFilter.equipment.category"?: [object Object];
    "rowFilter.equipment.created_at"?: [object Object];
    "rowFilter.equipment.id"?: [object Object];
    "rowFilter.equipment.name"?: [object Object];
    "rowFilter.favorite_gyms.created_at"?: [object Object];
    "rowFilter.favorite_gyms.gym_id"?: [object Object];
    "rowFilter.favorite_gyms.id"?: [object Object];
    "rowFilter.favorite_gyms.user_id"?: [object Object];
    "rowFilter.follows.created_at"?: [object Object];
    "rowFilter.follows.follower_id"?: [object Object];
    "rowFilter.follows.following_id"?: [object Object];
    "rowFilter.follows.id"?: [object Object];
    "rowFilter.geography_columns.coord_dimension"?: [object Object];
    "rowFilter.geography_columns.f_geography_column"?: [object Object];
    "rowFilter.geography_columns.f_table_catalog"?: [object Object];
    "rowFilter.geography_columns.f_table_name"?: [object Object];
    "rowFilter.geography_columns.f_table_schema"?: [object Object];
    "rowFilter.geography_columns.srid"?: [object Object];
    "rowFilter.geography_columns.type"?: [object Object];
    "rowFilter.geometry_columns.coord_dimension"?: [object Object];
    "rowFilter.geometry_columns.f_geometry_column"?: [object Object];
    "rowFilter.geometry_columns.f_table_catalog"?: [object Object];
    "rowFilter.geometry_columns.f_table_name"?: [object Object];
    "rowFilter.geometry_columns.f_table_schema"?: [object Object];
    "rowFilter.geometry_columns.srid"?: [object Object];
    "rowFilter.geometry_columns.type"?: [object Object];
    "rowFilter.gym_checkins.checked_in_at"?: [object Object];
    "rowFilter.gym_checkins.checked_out_at"?: [object Object];
    "rowFilter.gym_checkins.created_at"?: [object Object];
    "rowFilter.gym_checkins.crowd_level"?: [object Object];
    "rowFilter.gym_checkins.gym_id"?: [object Object];
    "rowFilter.gym_checkins.id"?: [object Object];
    "rowFilter.gym_checkins.user_id"?: [object Object];
    "rowFilter.gym_equipment.brand"?: [object Object];
    "rowFilter.gym_equipment.category"?: [object Object];
    "rowFilter.gym_equipment.created_at"?: [object Object];
    "rowFilter.gym_equipment.gym_id"?: [object Object];
    "rowFilter.gym_equipment.id"?: [object Object];
    "rowFilter.gym_equipment.image_url"?: [object Object];
    "rowFilter.gym_equipment.model"?: [object Object];
    "rowFilter.gym_equipment.muscle_groups"?: [object Object];
    "rowFilter.gym_equipment.notes"?: [object Object];
    "rowFilter.gym_equipment.quantity"?: [object Object];
    "rowFilter.gym_equipment.type"?: [object Object];
    "rowFilter.gym_equipment.updated_at"?: [object Object];
    "rowFilter.gym_friends.accepted_at"?: [object Object];
    "rowFilter.gym_friends.created_at"?: [object Object];
    "rowFilter.gym_friends.friend_id"?: [object Object];
    "rowFilter.gym_friends.id"?: [object Object];
    "rowFilter.gym_friends.status"?: [object Object];
    "rowFilter.gym_friends.user_id"?: [object Object];
    "rowFilter.gym_machines.created_at"?: [object Object];
    "rowFilter.gym_machines.gym_id"?: [object Object];
    "rowFilter.gym_machines.id"?: [object Object];
    "rowFilter.gym_machines.machine_id"?: [object Object];
    "rowFilter.gym_machines.notes"?: [object Object];
    "rowFilter.gym_machines.quantity"?: [object Object];
    "rowFilter.gym_posts.comment_count"?: [object Object];
    "rowFilter.gym_posts.content"?: [object Object];
    "rowFilter.gym_posts.created_at"?: [object Object];
    "rowFilter.gym_posts.crowd_status"?: [object Object];
    "rowFilter.gym_posts.duration_minutes"?: [object Object];
    "rowFilter.gym_posts.gym_id"?: [object Object];
    "rowFilter.gym_posts.id"?: [object Object];
    "rowFilter.gym_posts.images"?: [object Object];
    "rowFilter.gym_posts.is_public"?: [object Object];
    "rowFilter.gym_posts.like_count"?: [object Object];
    "rowFilter.gym_posts.muscle_groups_trained"?: [object Object];
    "rowFilter.gym_posts.updated_at"?: [object Object];
    "rowFilter.gym_posts.user_id"?: [object Object];
    "rowFilter.gym_posts.visibility"?: [object Object];
    "rowFilter.gym_posts.workout_type"?: [object Object];
    "rowFilter.gym_reviews.cleanliness_rating"?: [object Object];
    "rowFilter.gym_reviews.content"?: [object Object];
    "rowFilter.gym_reviews.created_at"?: [object Object];
    "rowFilter.gym_reviews.crowd_rating"?: [object Object];
    "rowFilter.gym_reviews.equipment_rating"?: [object Object];
    "rowFilter.gym_reviews.gym_id"?: [object Object];
    "rowFilter.gym_reviews.helpful_count"?: [object Object];
    "rowFilter.gym_reviews.id"?: [object Object];
    "rowFilter.gym_reviews.images"?: [object Object];
    "rowFilter.gym_reviews.rating"?: [object Object];
    "rowFilter.gym_reviews.staff_rating"?: [object Object];
    "rowFilter.gym_reviews.title"?: [object Object];
    "rowFilter.gym_reviews.updated_at"?: [object Object];
    "rowFilter.gym_reviews.user_id"?: [object Object];
    "rowFilter.gyms.address"?: [object Object];
    "rowFilter.gyms.business_hours"?: [object Object];
    "rowFilter.gyms.city"?: [object Object];
    "rowFilter.gyms.created_at"?: [object Object];
    "rowFilter.gyms.created_by"?: [object Object];
    "rowFilter.gyms.description"?: [object Object];
    "rowFilter.gyms.equipment_types"?: [object Object];
    "rowFilter.gyms.facilities"?: [object Object];
    "rowFilter.gyms.has_24h"?: [object Object];
    "rowFilter.gyms.has_locker"?: [object Object];
    "rowFilter.gyms.has_parking"?: [object Object];
    "rowFilter.gyms.has_sauna"?: [object Object];
    "rowFilter.gyms.has_shower"?: [object Object];
    "rowFilter.gyms.holidays"?: [object Object];
    "rowFilter.gyms.id"?: [object Object];
    "rowFilter.gyms.latitude"?: [object Object];
    "rowFilter.gyms.location"?: [object Object];
    "rowFilter.gyms.longitude"?: [object Object];
    "rowFilter.gyms.machine_brands"?: [object Object];
    "rowFilter.gyms.name"?: [object Object];
    "rowFilter.gyms.name_kana"?: [object Object];
    "rowFilter.gyms.phone"?: [object Object];
    "rowFilter.gyms.prefecture"?: [object Object];
    "rowFilter.gyms.price_info"?: [object Object];
    "rowFilter.gyms.rating"?: [object Object];
    "rowFilter.gyms.review_count"?: [object Object];
    "rowFilter.gyms.status"?: [object Object];
    "rowFilter.gyms.updated_at"?: [object Object];
    "rowFilter.gyms.verified"?: [object Object];
    "rowFilter.gyms.website"?: [object Object];
    "rowFilter.machine_makers.created_at"?: [object Object];
    "rowFilter.machine_makers.id"?: [object Object];
    "rowFilter.machine_makers.name"?: [object Object];
    "rowFilter.machines.created_at"?: [object Object];
    "rowFilter.machines.id"?: [object Object];
    "rowFilter.machines.maker"?: [object Object];
    "rowFilter.machines.name"?: [object Object];
    "rowFilter.machines.target"?: [object Object];
    "rowFilter.machines.target_category"?: [object Object];
    "rowFilter.machines.target_detail"?: [object Object];
    "rowFilter.machines.type"?: [object Object];
    "rowFilter.machines.updated_at"?: [object Object];
    "rowFilter.maker.created_at"?: [object Object];
    "rowFilter.maker.id"?: [object Object];
    "rowFilter.maker.name"?: [object Object];
    "rowFilter.muscle_groups.category"?: [object Object];
    "rowFilter.muscle_groups.created_at"?: [object Object];
    "rowFilter.muscle_groups.id"?: [object Object];
    "rowFilter.muscle_groups.name"?: [object Object];
    "rowFilter.muscle_groups.parts"?: [object Object];
    "rowFilter.notifications.created_at"?: [object Object];
    "rowFilter.notifications.id"?: [object Object];
    "rowFilter.notifications.is_read"?: [object Object];
    "rowFilter.notifications.message"?: [object Object];
    "rowFilter.notifications.related_gym_id"?: [object Object];
    "rowFilter.notifications.related_post_id"?: [object Object];
    "rowFilter.notifications.related_user_id"?: [object Object];
    "rowFilter.notifications.title"?: [object Object];
    "rowFilter.notifications.type"?: [object Object];
    "rowFilter.notifications.user_id"?: [object Object];
    "rowFilter.personal_records.achieved_at"?: [object Object];
    "rowFilter.personal_records.created_at"?: [object Object];
    "rowFilter.personal_records.exercise_name"?: [object Object];
    "rowFilter.personal_records.gym_id"?: [object Object];
    "rowFilter.personal_records.id"?: [object Object];
    "rowFilter.personal_records.notes"?: [object Object];
    "rowFilter.personal_records.previous_value"?: [object Object];
    "rowFilter.personal_records.record_type"?: [object Object];
    "rowFilter.personal_records.record_unit"?: [object Object];
    "rowFilter.personal_records.record_value"?: [object Object];
    "rowFilter.personal_records.updated_at"?: [object Object];
    "rowFilter.personal_records.user_id"?: [object Object];
    "rowFilter.personal_records.workout_session_id"?: [object Object];
    "rowFilter.post_comments.content"?: [object Object];
    "rowFilter.post_comments.created_at"?: [object Object];
    "rowFilter.post_comments.id"?: [object Object];
    "rowFilter.post_comments.post_id"?: [object Object];
    "rowFilter.post_comments.updated_at"?: [object Object];
    "rowFilter.post_comments.user_id"?: [object Object];
    "rowFilter.post_likes.created_at"?: [object Object];
    "rowFilter.post_likes.id"?: [object Object];
    "rowFilter.post_likes.post_id"?: [object Object];
    "rowFilter.post_likes.user_id"?: [object Object];
    "rowFilter.spatial_ref_sys.auth_name"?: [object Object];
    "rowFilter.spatial_ref_sys.auth_srid"?: [object Object];
    "rowFilter.spatial_ref_sys.proj4text"?: [object Object];
    "rowFilter.spatial_ref_sys.srid"?: [object Object];
    "rowFilter.spatial_ref_sys.srtext"?: [object Object];
    "rowFilter.user_profiles.body_fat_percentage"?: [object Object];
    "rowFilter.user_profiles.created_at"?: [object Object];
    "rowFilter.user_profiles.gym_experience_years"?: [object Object];
    "rowFilter.user_profiles.height_cm"?: [object Object];
    "rowFilter.user_profiles.preferred_training_time"?: [object Object];
    "rowFilter.user_profiles.profile_visibility"?: [object Object];
    "rowFilter.user_profiles.show_stats"?: [object Object];
    "rowFilter.user_profiles.training_frequency"?: [object Object];
    "rowFilter.user_profiles.training_goals"?: [object Object];
    "rowFilter.user_profiles.updated_at"?: [object Object];
    "rowFilter.user_profiles.user_id"?: [object Object];
    "rowFilter.user_profiles.weight_kg"?: [object Object];
    "rowFilter.users.avatar_url"?: [object Object];
    "rowFilter.users.bio"?: [object Object];
    "rowFilter.users.created_at"?: [object Object];
    "rowFilter.users.display_name"?: [object Object];
    "rowFilter.users.email"?: [object Object];
    "rowFilter.users.email_verified"?: [object Object];
    "rowFilter.users.id"?: [object Object];
    "rowFilter.users.is_active"?: [object Object];
    "rowFilter.users.last_seen_at"?: [object Object];
    "rowFilter.users.updated_at"?: [object Object];
    "rowFilter.users.username"?: [object Object];
    "rowFilter.workout_exercises.created_at"?: [object Object];
    "rowFilter.workout_exercises.equipment_type"?: [object Object];
    "rowFilter.workout_exercises.exercise_name"?: [object Object];
    "rowFilter.workout_exercises.id"?: [object Object];
    "rowFilter.workout_exercises.muscle_group"?: [object Object];
    "rowFilter.workout_exercises.notes"?: [object Object];
    "rowFilter.workout_exercises.order_index"?: [object Object];
    "rowFilter.workout_exercises.session_id"?: [object Object];
    "rowFilter.workout_exercises.sets"?: [object Object];
    "rowFilter.workout_sessions.created_at"?: [object Object];
    "rowFilter.workout_sessions.ended_at"?: [object Object];
    "rowFilter.workout_sessions.gym_id"?: [object Object];
    "rowFilter.workout_sessions.id"?: [object Object];
    "rowFilter.workout_sessions.mood"?: [object Object];
    "rowFilter.workout_sessions.notes"?: [object Object];
    "rowFilter.workout_sessions.started_at"?: [object Object];
    "rowFilter.workout_sessions.user_id"?: [object Object];
    /** @description Filtering Columns */
    select?: [object Object];
  };
  requestBodies: {
    /** @description achievements */
    achievements?: {
      content: {
        "application/json": components["schemas"]["achievements"];
        "application/vnd.pgrst.object+json": components["schemas"]["achievements"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["achievements"];
        "text/csv": components["schemas"]["achievements"];
      };
    };
    Args: {
      content: {
        "application/json": [object Object];
        "application/vnd.pgrst.object+json": [object Object];
        "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
        "text/csv": [object Object];
      };
    };
    Args2: {
      content: {
        "application/json": [object Object];
        "application/vnd.pgrst.object+json": [object Object];
        "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
        "text/csv": [object Object];
      };
    };
    Args3: {
      content: {
        "application/json": [object Object];
        "application/vnd.pgrst.object+json": [object Object];
        "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
        "text/csv": [object Object];
      };
    };
    Args4: {
      content: {
        "application/json": [object Object];
        "application/vnd.pgrst.object+json": [object Object];
        "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
        "text/csv": [object Object];
      };
    };
    Args5: {
      content: {
        "application/json": [object Object];
        "application/vnd.pgrst.object+json": [object Object];
        "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
        "text/csv": [object Object];
      };
    };
    Args6: {
      content: {
        "application/json": [object Object];
        "application/vnd.pgrst.object+json": [object Object];
        "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
        "text/csv": [object Object];
      };
    };
    Args7: {
      content: {
        "application/json": [object Object];
        "application/vnd.pgrst.object+json": [object Object];
        "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
        "text/csv": [object Object];
      };
    };
    Args8: {
      content: {
        "application/json": [object Object];
        "application/vnd.pgrst.object+json": [object Object];
        "application/vnd.pgrst.object+json;nulls=stripped": [object Object];
        "text/csv": [object Object];
      };
    };
    /** @description equipment */
    equipment?: {
      content: {
        "application/json": components["schemas"]["equipment"];
        "application/vnd.pgrst.object+json": components["schemas"]["equipment"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["equipment"];
        "text/csv": components["schemas"]["equipment"];
      };
    };
    /** @description favorite_gyms */
    favorite_gyms?: {
      content: {
        "application/json": components["schemas"]["favorite_gyms"];
        "application/vnd.pgrst.object+json": components["schemas"]["favorite_gyms"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["favorite_gyms"];
        "text/csv": components["schemas"]["favorite_gyms"];
      };
    };
    /** @description follows */
    follows?: {
      content: {
        "application/json": components["schemas"]["follows"];
        "application/vnd.pgrst.object+json": components["schemas"]["follows"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["follows"];
        "text/csv": components["schemas"]["follows"];
      };
    };
    /** @description geometry_columns */
    geometry_columns?: {
      content: {
        "application/json": components["schemas"]["geometry_columns"];
        "application/vnd.pgrst.object+json": components["schemas"]["geometry_columns"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["geometry_columns"];
        "text/csv": components["schemas"]["geometry_columns"];
      };
    };
    /** @description gym_checkins */
    gym_checkins?: {
      content: {
        "application/json": components["schemas"]["gym_checkins"];
        "application/vnd.pgrst.object+json": components["schemas"]["gym_checkins"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["gym_checkins"];
        "text/csv": components["schemas"]["gym_checkins"];
      };
    };
    /** @description gym_equipment */
    gym_equipment?: {
      content: {
        "application/json": components["schemas"]["gym_equipment"];
        "application/vnd.pgrst.object+json": components["schemas"]["gym_equipment"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["gym_equipment"];
        "text/csv": components["schemas"]["gym_equipment"];
      };
    };
    /** @description gym_friends */
    gym_friends?: {
      content: {
        "application/json": components["schemas"]["gym_friends"];
        "application/vnd.pgrst.object+json": components["schemas"]["gym_friends"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["gym_friends"];
        "text/csv": components["schemas"]["gym_friends"];
      };
    };
    /** @description gym_machines */
    gym_machines?: {
      content: {
        "application/json": components["schemas"]["gym_machines"];
        "application/vnd.pgrst.object+json": components["schemas"]["gym_machines"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["gym_machines"];
        "text/csv": components["schemas"]["gym_machines"];
      };
    };
    /** @description gym_posts */
    gym_posts?: {
      content: {
        "application/json": components["schemas"]["gym_posts"];
        "application/vnd.pgrst.object+json": components["schemas"]["gym_posts"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["gym_posts"];
        "text/csv": components["schemas"]["gym_posts"];
      };
    };
    /** @description gym_reviews */
    gym_reviews?: {
      content: {
        "application/json": components["schemas"]["gym_reviews"];
        "application/vnd.pgrst.object+json": components["schemas"]["gym_reviews"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["gym_reviews"];
        "text/csv": components["schemas"]["gym_reviews"];
      };
    };
    /** @description gyms */
    gyms?: {
      content: {
        "application/json": components["schemas"]["gyms"];
        "application/vnd.pgrst.object+json": components["schemas"]["gyms"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["gyms"];
        "text/csv": components["schemas"]["gyms"];
      };
    };
    /** @description machine_makers */
    machine_makers?: {
      content: {
        "application/json": components["schemas"]["machine_makers"];
        "application/vnd.pgrst.object+json": components["schemas"]["machine_makers"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["machine_makers"];
        "text/csv": components["schemas"]["machine_makers"];
      };
    };
    /** @description machines */
    machines?: {
      content: {
        "application/json": components["schemas"]["machines"];
        "application/vnd.pgrst.object+json": components["schemas"]["machines"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["machines"];
        "text/csv": components["schemas"]["machines"];
      };
    };
    /** @description maker */
    maker?: {
      content: {
        "application/json": components["schemas"]["maker"];
        "application/vnd.pgrst.object+json": components["schemas"]["maker"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["maker"];
        "text/csv": components["schemas"]["maker"];
      };
    };
    /** @description muscle_groups */
    muscle_groups?: {
      content: {
        "application/json": components["schemas"]["muscle_groups"];
        "application/vnd.pgrst.object+json": components["schemas"]["muscle_groups"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["muscle_groups"];
        "text/csv": components["schemas"]["muscle_groups"];
      };
    };
    /** @description notifications */
    notifications?: {
      content: {
        "application/json": components["schemas"]["notifications"];
        "application/vnd.pgrst.object+json": components["schemas"]["notifications"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["notifications"];
        "text/csv": components["schemas"]["notifications"];
      };
    };
    /** @description personal_records */
    personal_records?: {
      content: {
        "application/json": components["schemas"]["personal_records"];
        "application/vnd.pgrst.object+json": components["schemas"]["personal_records"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["personal_records"];
        "text/csv": components["schemas"]["personal_records"];
      };
    };
    /** @description post_comments */
    post_comments?: {
      content: {
        "application/json": components["schemas"]["post_comments"];
        "application/vnd.pgrst.object+json": components["schemas"]["post_comments"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["post_comments"];
        "text/csv": components["schemas"]["post_comments"];
      };
    };
    /** @description post_likes */
    post_likes?: {
      content: {
        "application/json": components["schemas"]["post_likes"];
        "application/vnd.pgrst.object+json": components["schemas"]["post_likes"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["post_likes"];
        "text/csv": components["schemas"]["post_likes"];
      };
    };
    /** @description spatial_ref_sys */
    spatial_ref_sys?: {
      content: {
        "application/json": components["schemas"]["spatial_ref_sys"];
        "application/vnd.pgrst.object+json": components["schemas"]["spatial_ref_sys"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["spatial_ref_sys"];
        "text/csv": components["schemas"]["spatial_ref_sys"];
      };
    };
    /** @description user_profiles */
    user_profiles?: {
      content: {
        "application/json": components["schemas"]["user_profiles"];
        "application/vnd.pgrst.object+json": components["schemas"]["user_profiles"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_profiles"];
        "text/csv": components["schemas"]["user_profiles"];
      };
    };
    /** @description users */
    users?: {
      content: {
        "application/json": components["schemas"]["users"];
        "application/vnd.pgrst.object+json": components["schemas"]["users"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["users"];
        "text/csv": components["schemas"]["users"];
      };
    };
    /** @description workout_exercises */
    workout_exercises?: {
      content: {
        "application/json": components["schemas"]["workout_exercises"];
        "application/vnd.pgrst.object+json": components["schemas"]["workout_exercises"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["workout_exercises"];
        "text/csv": components["schemas"]["workout_exercises"];
      };
    };
    /** @description workout_sessions */
    workout_sessions?: {
      content: {
        "application/json": components["schemas"]["workout_sessions"];
        "application/vnd.pgrst.object+json": components["schemas"]["workout_sessions"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["workout_sessions"];
        "text/csv": components["schemas"]["workout_sessions"];
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
